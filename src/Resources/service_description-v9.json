{
    "baseUri": "https://discordapp.com/api/v9",
    "version": 9,
    "operations": {
        "guild": {
            "createGuild": {
                "link": "https://discordapp.com/developers/docs/resources/guild#create-guild",
                "resource": "guild",
                "name": "Create Guild",
                "method": "POST",
                "url": "/guilds",
                "description": "guild",
                "parameters": {
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "name of the guild (2-100 characters)"
                    },
                    "region": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "voice region id (deprecated)"
                    },
                    "icon": {
                        "location": "json",
                        "type": "image data",
                        "description": "base64 128x128 image for the guild icon"
                    },
                    "verification_level": {
                        "location": "json",
                        "type": "integer",
                        "description": "verification level"
                    },
                    "default_message_notifications": {
                        "location": "json",
                        "type": "integer",
                        "description": "default message notification level"
                    },
                    "explicit_content_filter": {
                        "location": "json",
                        "type": "integer",
                        "description": "explicit content filter level"
                    },
                    "roles": {
                        "location": "json",
                        "type": "array",
                        "description": "new guild roles"
                    },
                    "channels": {
                        "location": "json",
                        "type": "array",
                        "description": "new guild's channels"
                    },
                    "afk_channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id for afk channel"
                    },
                    "afk_timeout": {
                        "location": "json",
                        "type": "integer",
                        "description": "afk timeout in seconds"
                    },
                    "system_channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the id of the channel where guild notices such as welcome messages and boost events are posted"
                    },
                    "system_channel_flags": {
                        "location": "json",
                        "type": "integer",
                        "description": "system channel flags"
                    }
                },
                "parametersArray": false
            },
            "getGuild": {
                "link": "https://discordapp.com/developers/docs/resources/guild#get-guild",
                "resource": "guild",
                "name": "Get Guild",
                "method": "GET",
                "url": "/guilds/{guild.id}",
                "description": "guild",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "with_counts": {
                        "location": "query",
                        "type": "boolean",
                        "description": "when true, will return approximate member and presence counts for the guild",
                        "default": false,
                        "required": false
                    }
                },
                "parametersArray": false
            },
            "getGuildPreview": {
                "link": "https://discordapp.com/developers/docs/resources/guild#get-guild-preview",
                "resource": "guild",
                "name": "Get Guild Preview",
                "method": "GET",
                "url": "/guilds/{guild.id}/preview",
                "description": "guild preview",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "modifyGuild": {
                "link": "https://discordapp.com/developers/docs/resources/guild#modify-guild",
                "resource": "guild",
                "name": "Modify Guild",
                "method": "PATCH",
                "url": "/guilds/{guild.id}",
                "description": "guild",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "guild name"
                    },
                    "region": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "guild voice region id (deprecated)"
                    },
                    "verification_level": {
                        "location": "json",
                        "type": "integer",
                        "nullable": true,
                        "description": "verification level"
                    },
                    "default_message_notifications": {
                        "location": "json",
                        "type": "integer",
                        "nullable": true,
                        "description": "default message notification level"
                    },
                    "explicit_content_filter": {
                        "location": "json",
                        "type": "integer",
                        "nullable": true,
                        "description": "explicit content filter level"
                    },
                    "afk_channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "id for afk channel"
                    },
                    "afk_timeout": {
                        "location": "json",
                        "type": "integer",
                        "description": "afk timeout in seconds"
                    },
                    "icon": {
                        "location": "json",
                        "type": "image data",
                        "nullable": true,
                        "description": "base64 1024x1024 png/jpeg/gif image for the guild icon (can be animated gif when the server has the ANIMATED_ICON feature)"
                    },
                    "owner_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "user id to transfer guild ownership to (must be owner)"
                    },
                    "splash": {
                        "location": "json",
                        "type": "image data",
                        "nullable": true,
                        "description": "base64 16:9 png/jpeg image for the guild splash (when the server has the INVITE_SPLASH feature)"
                    },
                    "discovery_splash": {
                        "location": "json",
                        "type": "image data",
                        "nullable": true,
                        "description": "base64 16:9 png/jpeg image for the guild discovery splash (when the server has the DISCOVERABLE feature)"
                    },
                    "banner": {
                        "location": "json",
                        "type": "image data",
                        "nullable": true,
                        "description": "base64 16:9 png/jpeg image for the guild banner (when the server has the BANNER feature)"
                    },
                    "system_channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the id of the channel where guild notices such as welcome messages and boost events are posted"
                    },
                    "system_channel_flags": {
                        "location": "json",
                        "type": "integer",
                        "description": "system channel flags"
                    },
                    "rules_channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the id of the channel where Community guilds display rules and/or guidelines"
                    },
                    "public_updates_channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the id of the channel where admins and moderators of Community guilds receive notices from Discord"
                    },
                    "preferred_locale": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "the preferred locale of a Community guild used in server discovery and notices from Discord; defaults to \"en-US\""
                    },
                    "features": {
                        "location": "json",
                        "type": "array",
                        "description": "enabled guild features"
                    },
                    "description": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "the description for the guild, if the guild is discoverable"
                    },
                    "premium_progress_bar_enabled": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the guild's boost progress bar should be enabled.",
                        "default": false
                    }
                },
                "parametersArray": false
            },
            "deleteGuild": {
                "link": "https://discordapp.com/developers/docs/resources/guild#delete-guild",
                "resource": "guild",
                "name": "Delete Guild",
                "method": "DELETE",
                "url": "/guilds/{guild.id}",
                "description": "Guild Delete",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getGuildChannels": {
                "link": "https://discordapp.com/developers/docs/resources/guild#get-guild-channels",
                "resource": "guild",
                "name": "Get Guild Channels",
                "method": "GET",
                "url": "/guilds/{guild.id}/channels",
                "description": "channel",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "createGuildChannel": {
                "link": "https://discordapp.com/developers/docs/resources/guild#create-guild-channel",
                "resource": "guild",
                "name": "Create Guild Channel",
                "method": "POST",
                "url": "/guilds/{guild.id}/channels",
                "description": "channel",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "channel name (1-100 characters)"
                    },
                    "type": {
                        "location": "json",
                        "type": "integer",
                        "description": "the type of channel"
                    },
                    "topic": {
                        "location": "json",
                        "type": "string",
                        "description": "channel topic (0-1024 characters)"
                    },
                    "bitrate": {
                        "location": "json",
                        "type": "integer",
                        "description": "the bitrate (in bits) of the voice channel (voice only)"
                    },
                    "user_limit": {
                        "location": "json",
                        "type": "integer",
                        "description": "the user limit of the voice channel (voice only)"
                    },
                    "rate_limit_per_user": {
                        "location": "json",
                        "type": "integer",
                        "description": "amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission manage_messages or manage_channel, are unaffected"
                    },
                    "position": {
                        "location": "json",
                        "type": "integer",
                        "description": "sorting position of the channel"
                    },
                    "permission_overwrites": {
                        "location": "json",
                        "type": "array",
                        "description": "the channel's permission overwrites"
                    },
                    "parent_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id of the parent category for a channel"
                    },
                    "nsfw": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the channel is nsfw",
                        "default": false
                    }
                },
                "parametersArray": false
            },
            "modifyGuildChannelPositions": {
                "link": "https://discordapp.com/developers/docs/resources/guild#modify-guild-channel-positions",
                "resource": "guild",
                "name": "Modify Guild Channel Positions",
                "method": "PATCH",
                "url": "/guilds/{guild.id}/channels",
                "description": "channel",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "channel id"
                    },
                    "position": {
                        "location": "json",
                        "type": "integer",
                        "nullable": true,
                        "description": "sorting position of the channel"
                    },
                    "lock_permissions": {
                        "location": "json",
                        "type": "boolean",
                        "nullable": true,
                        "description": "syncs the permission overwrites with the new parent, if moving to a new category",
                        "default": false
                    },
                    "parent_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the new parent ID for the channel that is moved"
                    }
                },
                "parametersArray": false
            },
            "listActiveThreads": {
                "link": "https://discordapp.com/developers/docs/resources/guild#list-active-threads",
                "resource": "guild",
                "name": "List Active Threads",
                "method": "GET",
                "url": "/guilds/{guild.id}/threads/active",
                "description": "channel",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getGuildMember": {
                "link": "https://discordapp.com/developers/docs/resources/guild#get-guild-member",
                "resource": "guild",
                "name": "Get Guild Member",
                "method": "GET",
                "url": "/guilds/{guild.id}/members/{user.id}",
                "description": "guild member",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "user.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "listGuildMembers": {
                "link": "https://discordapp.com/developers/docs/resources/guild#list-guild-members",
                "resource": "guild",
                "name": "List Guild Members",
                "method": "GET",
                "url": "/guilds/{guild.id}/members",
                "description": "guild member",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "limit": {
                        "location": "query",
                        "type": "integer",
                        "description": "max number of members to return (1-1000)",
                        "default": 1
                    },
                    "after": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "the highest user id in the previous page"
                    }
                },
                "parametersArray": false
            },
            "searchGuildMembers": {
                "link": "https://discordapp.com/developers/docs/resources/guild#search-guild-members",
                "resource": "guild",
                "name": "Search Guild Members",
                "method": "GET",
                "url": "/guilds/{guild.id}/members/search",
                "description": "guild member",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "query": {
                        "location": "query",
                        "type": "string",
                        "description": "Query string to match username(s) and nickname(s) against.",
                        "default": ""
                    },
                    "limit": {
                        "location": "query",
                        "type": "integer",
                        "description": "max number of members to return (1-1000)",
                        "default": 1
                    }
                },
                "parametersArray": false
            },
            "addGuildMember": {
                "link": "https://discordapp.com/developers/docs/resources/guild#add-guild-member",
                "resource": "guild",
                "name": "Add Guild Member",
                "method": "PUT",
                "url": "/guilds/{guild.id}/members/{user.id}",
                "description": "guild member",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "user.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "access_token": {
                        "location": "json",
                        "type": "string",
                        "description": "an oauth2 access token granted with the guilds.join to the bot's application for the user you want to add to the guild",
                        "extra": {
                            "Permission": ""
                        }
                    },
                    "nick": {
                        "location": "json",
                        "type": "string",
                        "description": "value to set users nickname to",
                        "extra": {
                            "Permission": "MANAGE_NICKNAMES"
                        }
                    },
                    "roles": {
                        "location": "json",
                        "type": "array",
                        "description": "array of role ids the member is assigned",
                        "extra": {
                            "Permission": "MANAGE_ROLES"
                        }
                    },
                    "mute": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the user is muted in voice channels",
                        "default": false,
                        "extra": {
                            "Permission": "MUTE_MEMBERS"
                        }
                    },
                    "deaf": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the user is deafened in voice channels",
                        "default": false,
                        "extra": {
                            "Permission": "DEAFEN_MEMBERS"
                        }
                    }
                },
                "parametersArray": false
            },
            "modifyGuildMember": {
                "link": "https://discordapp.com/developers/docs/resources/guild#modify-guild-member",
                "resource": "guild",
                "name": "Modify Guild Member",
                "method": "PATCH",
                "url": "/guilds/{guild.id}/members/{user.id}",
                "description": "guild member",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "user.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "nick": {
                        "location": "json",
                        "type": "string",
                        "description": "value to set users nickname to",
                        "extra": {
                            "Permission": "MANAGE_NICKNAMES"
                        }
                    },
                    "roles": {
                        "location": "json",
                        "type": "array",
                        "description": "array of role ids the member is assigned",
                        "extra": {
                            "Permission": "MANAGE_ROLES"
                        }
                    },
                    "mute": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the user is muted in voice channels. Will throw a 400 if the user is not in a voice channel",
                        "default": false,
                        "extra": {
                            "Permission": "MUTE_MEMBERS"
                        }
                    },
                    "deaf": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the user is deafened in voice channels. Will throw a 400 if the user is not in a voice channel",
                        "default": false,
                        "extra": {
                            "Permission": "DEAFEN_MEMBERS"
                        }
                    },
                    "channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id of channel to move user to (if they are connected to voice)",
                        "extra": {
                            "Permission": "MOVE_MEMBERS"
                        }
                    }
                },
                "parametersArray": false
            },
            "modifyCurrentMember": {
                "link": "https://discordapp.com/developers/docs/resources/guild#modify-current-member",
                "resource": "guild",
                "name": "Modify Current Member",
                "method": "PATCH",
                "url": "/guilds/{guild.id}/members/@me",
                "description": "Guild Member Update",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "nick": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "value to set users nickname to",
                        "extra": {
                            "Permission": "CHANGE_NICKNAME"
                        }
                    }
                },
                "parametersArray": false
            },
            "modifyCurrentUserNick": {
                "link": "https://discordapp.com/developers/docs/resources/guild#modify-current-user-nick",
                "resource": "guild",
                "name": "Modify Current User Nick",
                "method": "PATCH",
                "url": "/guilds/{guild.id}/members/@me/nick",
                "description": "Modify Current Member",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "nick": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "value to set users nickname to",
                        "extra": {
                            "Permission": "CHANGE_NICKNAME"
                        }
                    }
                },
                "parametersArray": false
            },
            "addGuildMemberRole": {
                "link": "https://discordapp.com/developers/docs/resources/guild#add-guild-member-role",
                "resource": "guild",
                "name": "Add Guild Member Role",
                "method": "PUT",
                "url": "/guilds/{guild.id}/members/{user.id}/roles/{role.id}",
                "description": "guild member",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "user.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "role.id": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "removeGuildMemberRole": {
                "link": "https://discordapp.com/developers/docs/resources/guild#remove-guild-member-role",
                "resource": "guild",
                "name": "Remove Guild Member Role",
                "method": "DELETE",
                "url": "/guilds/{guild.id}/members/{user.id}/roles/{role.id}",
                "description": "guild member",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "user.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "role.id": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "removeGuildMember": {
                "link": "https://discordapp.com/developers/docs/resources/guild#remove-guild-member",
                "resource": "guild",
                "name": "Remove Guild Member",
                "method": "DELETE",
                "url": "/guilds/{guild.id}/members/{user.id}",
                "description": "Guild Member Remove",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "user.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getGuildBans": {
                "link": "https://discordapp.com/developers/docs/resources/guild#get-guild-bans",
                "resource": "guild",
                "name": "Get Guild Bans",
                "method": "GET",
                "url": "/guilds/{guild.id}/bans",
                "description": "ban",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getGuildBan": {
                "link": "https://discordapp.com/developers/docs/resources/guild#get-guild-ban",
                "resource": "guild",
                "name": "Get Guild Ban",
                "method": "GET",
                "url": "/guilds/{guild.id}/bans/{user.id}",
                "description": "ban",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "user.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "createGuildBan": {
                "link": "https://discordapp.com/developers/docs/resources/guild#create-guild-ban",
                "resource": "guild",
                "name": "Create Guild Ban",
                "method": "PUT",
                "url": "/guilds/{guild.id}/bans/{user.id}",
                "description": "Guild Ban Add",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "user.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "delete_message_days": {
                        "location": "json",
                        "type": "integer",
                        "description": "number of days to delete messages for (0-7)"
                    },
                    "reason": {
                        "location": "json",
                        "type": "string",
                        "description": "reason for the ban (deprecated)"
                    }
                },
                "parametersArray": false
            },
            "removeGuildBan": {
                "link": "https://discordapp.com/developers/docs/resources/guild#remove-guild-ban",
                "resource": "guild",
                "name": "Remove Guild Ban",
                "method": "DELETE",
                "url": "/guilds/{guild.id}/bans/{user.id}",
                "description": "Guild Ban Remove",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "user.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getGuildRoles": {
                "link": "https://discordapp.com/developers/docs/resources/guild#get-guild-roles",
                "resource": "guild",
                "name": "Get Guild Roles",
                "method": "GET",
                "url": "/guilds/{guild.id}/roles",
                "description": "role",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "createGuildRole": {
                "link": "https://discordapp.com/developers/docs/resources/guild#create-guild-role",
                "resource": "guild",
                "name": "Create Guild Role",
                "method": "POST",
                "url": "/guilds/{guild.id}/roles",
                "description": "role",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "name of the role",
                        "default": "\"new role\""
                    },
                    "permissions": {
                        "location": "json",
                        "type": "string",
                        "description": "bitwise value of the enabled/disabled permissions",
                        "default": "@everyone permissions in guild"
                    },
                    "color": {
                        "location": "json",
                        "type": "integer",
                        "description": "RGB color value",
                        "default": 0
                    },
                    "hoist": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the role should be displayed separately in the sidebar",
                        "default": false
                    },
                    "icon": {
                        "location": "json",
                        "type": "image data",
                        "description": "the role's icon image (if the guild has the ROLE_ICONS feature)",
                        "default": "null"
                    },
                    "unicode_emoji": {
                        "location": "json",
                        "type": "string",
                        "description": "the role's unicode emoji as a standard emoji (if the guild has the ROLE_ICONS feature)",
                        "default": "null"
                    },
                    "mentionable": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the role should be mentionable",
                        "default": false
                    }
                },
                "parametersArray": false
            },
            "modifyGuildRolePositions": {
                "link": "https://discordapp.com/developers/docs/resources/guild#modify-guild-role-positions",
                "resource": "guild",
                "name": "Modify Guild Role Positions",
                "method": "PATCH",
                "url": "/guilds/{guild.id}/roles",
                "description": "role",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "role"
                    },
                    "position": {
                        "location": "json",
                        "type": "integer",
                        "nullable": true,
                        "description": "sorting position of the role"
                    }
                },
                "parametersArray": false
            },
            "modifyGuildRole": {
                "link": "https://discordapp.com/developers/docs/resources/guild#modify-guild-role",
                "resource": "guild",
                "name": "Modify Guild Role",
                "method": "PATCH",
                "url": "/guilds/{guild.id}/roles/{role.id}",
                "description": "role",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "role.id": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "name of the role"
                    },
                    "permissions": {
                        "location": "json",
                        "type": "string",
                        "description": "bitwise value of the enabled/disabled permissions"
                    },
                    "color": {
                        "location": "json",
                        "type": "integer",
                        "description": "RGB color value"
                    },
                    "hoist": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the role should be displayed separately in the sidebar",
                        "default": false
                    },
                    "icon": {
                        "location": "json",
                        "type": "image data",
                        "description": "the role's icon image (if the guild has the ROLE_ICONS feature)"
                    },
                    "unicode_emoji": {
                        "location": "json",
                        "type": "string",
                        "description": "the role's unicode emoji as a standard emoji (if the guild has the ROLE_ICONS feature)"
                    },
                    "mentionable": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the role should be mentionable",
                        "default": false
                    }
                },
                "parametersArray": false
            },
            "deleteGuildRole": {
                "link": "https://discordapp.com/developers/docs/resources/guild#delete-guild-role",
                "resource": "guild",
                "name": "Delete Guild Role",
                "method": "DELETE",
                "url": "/guilds/{guild.id}/roles/{role.id}",
                "description": "Guild Role Delete",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "role.id": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getGuildPruneCount": {
                "link": "https://discordapp.com/developers/docs/resources/guild#get-guild-prune-count",
                "resource": "guild",
                "name": "Get Guild Prune Count",
                "method": "GET",
                "url": "/guilds/{guild.id}/prune",
                "description": "",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "days": {
                        "location": "query",
                        "type": "integer",
                        "description": "number of days to count prune for (1-30)",
                        "default": 7
                    },
                    "include_roles": {
                        "location": "query",
                        "type": "array",
                        "description": "role(s) to include",
                        "default": "none"
                    }
                },
                "parametersArray": false
            },
            "beginGuildPrune": {
                "link": "https://discordapp.com/developers/docs/resources/guild#begin-guild-prune",
                "resource": "guild",
                "name": "Begin Guild Prune",
                "method": "POST",
                "url": "/guilds/{guild.id}/prune",
                "description": "Guild Member Remove",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "days": {
                        "location": "json",
                        "type": "integer",
                        "description": "number of days to prune (1-30)",
                        "default": 7
                    },
                    "compute_prune_count": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether 'pruned' is returned, discouraged for large guilds",
                        "default": true
                    },
                    "include_roles": {
                        "location": "json",
                        "type": "array",
                        "description": "role(s) to include",
                        "default": "none"
                    },
                    "reason": {
                        "location": "json",
                        "type": "string",
                        "description": "reason for the prune (deprecated)",
                        "default": ""
                    }
                },
                "parametersArray": false
            },
            "getGuildVoiceRegions": {
                "link": "https://discordapp.com/developers/docs/resources/guild#get-guild-voice-regions",
                "resource": "guild",
                "name": "Get Guild Voice Regions",
                "method": "GET",
                "url": "/guilds/{guild.id}/regions",
                "description": "voice region",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getGuildInvites": {
                "link": "https://discordapp.com/developers/docs/resources/guild#get-guild-invites",
                "resource": "guild",
                "name": "Get Guild Invites",
                "method": "GET",
                "url": "/guilds/{guild.id}/invites",
                "description": "invite",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getGuildIntegrations": {
                "link": "https://discordapp.com/developers/docs/resources/guild#get-guild-integrations",
                "resource": "guild",
                "name": "Get Guild Integrations",
                "method": "GET",
                "url": "/guilds/{guild.id}/integrations",
                "description": "integration",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "deleteGuildIntegration": {
                "link": "https://discordapp.com/developers/docs/resources/guild#delete-guild-integration",
                "resource": "guild",
                "name": "Delete Guild Integration",
                "method": "DELETE",
                "url": "/guilds/{guild.id}/integrations/{integration.id}",
                "description": "integration",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "integration.id": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getGuildWidgetSettings": {
                "link": "https://discordapp.com/developers/docs/resources/guild#get-guild-widget-settings",
                "resource": "guild",
                "name": "Get Guild Widget Settings",
                "method": "GET",
                "url": "/guilds/{guild.id}/widget",
                "description": "guild widget",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "modifyGuildWidget": {
                "link": "https://discordapp.com/developers/docs/resources/guild#modify-guild-widget",
                "resource": "guild",
                "name": "Modify Guild Widget",
                "method": "PATCH",
                "url": "/guilds/{guild.id}/widget",
                "description": "guild widget",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getGuildWidget": {
                "link": "https://discordapp.com/developers/docs/resources/guild#get-guild-widget",
                "resource": "guild",
                "name": "Get Guild Widget",
                "method": "GET",
                "url": "/guilds/{guild.id}/widget.json",
                "description": "\"id\"",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getGuildVanityUrl": {
                "link": "https://discordapp.com/developers/docs/resources/guild#get-guild-vanity-url",
                "resource": "guild",
                "name": "Get Guild Vanity URL",
                "method": "GET",
                "url": "/guilds/{guild.id}/vanity-url",
                "description": "invite",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getGuildWidgetImage": {
                "link": "https://discordapp.com/developers/docs/resources/guild#get-guild-widget-image",
                "resource": "guild",
                "name": "Get Guild Widget Image",
                "method": "GET",
                "url": "/guilds/{guild.id}/widget.png",
                "description": "Example",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "style": {
                        "location": "query",
                        "type": "string",
                        "description": "style of the widget image returned (see below)",
                        "default": "shield"
                    }
                },
                "parametersArray": false
            },
            "getGuildWelcomeScreen": {
                "link": "https://discordapp.com/developers/docs/resources/guild#get-guild-welcome-screen",
                "resource": "guild",
                "name": "Get Guild Welcome Screen",
                "method": "GET",
                "url": "/guilds/{guild.id}/welcome-screen",
                "description": "Welcome Screen",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "modifyGuildWelcomeScreen": {
                "link": "https://discordapp.com/developers/docs/resources/guild#modify-guild-welcome-screen",
                "resource": "guild",
                "name": "Modify Guild Welcome Screen",
                "method": "PATCH",
                "url": "/guilds/{guild.id}/welcome-screen",
                "description": "Welcome Screen",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "enabled": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the welcome screen is enabled",
                        "default": false
                    },
                    "welcome_channels": {
                        "location": "json",
                        "type": "array",
                        "description": "channels linked in the welcome screen and their display options"
                    },
                    "description": {
                        "location": "json",
                        "type": "string",
                        "description": "the server description to show in the welcome screen"
                    }
                },
                "parametersArray": false
            },
            "modifyCurrentUserVoiceState": {
                "link": "https://discordapp.com/developers/docs/resources/guild#modify-current-user-voice-state",
                "resource": "guild",
                "name": "Modify Current User Voice State",
                "method": "PATCH",
                "url": "/guilds/{guild.id}/voice-states/@me",
                "description": "",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the id of the channel the user is currently in"
                    },
                    "suppress": {
                        "location": "json",
                        "type": "boolean",
                        "description": "toggles the user's suppress state",
                        "default": false
                    },
                    "request_to_speak_timestamp": {
                        "location": "json",
                        "type": "ISO8601 timestamp",
                        "nullable": true,
                        "description": "sets the user's request to speak"
                    }
                },
                "parametersArray": false
            },
            "modifyUserVoiceState": {
                "link": "https://discordapp.com/developers/docs/resources/guild#modify-user-voice-state",
                "resource": "guild",
                "name": "Modify User Voice State",
                "method": "PATCH",
                "url": "/guilds/{guild.id}/voice-states/{user.id}",
                "description": "",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "user.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the id of the channel the user is currently in"
                    },
                    "suppress": {
                        "location": "json",
                        "type": "boolean",
                        "description": "toggles the user's suppress state",
                        "default": false
                    }
                },
                "parametersArray": false
            },
            "updateNick": {
                "category": "guild",
                "url": "/guilds/{guild.id}/members/@me/nick",
                "method": "PATCH",
                "name": "Update Current Users' Nickname",
                "description": "Updates the bots nickname in a server",
                "responseNote": "Returns the nick",
                "responseTypes": [],
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri"
                    },
                    "nick": {
                        "type": "string",
                        "description": "Nickname to set",
                        "location": "json"
                    }
                }
            }
        },
        "application": {},
        "auditLog": {
            "getGuildAuditLog": {
                "link": "https://discordapp.com/developers/docs/resources/audit-log#get-guild-audit-log",
                "resource": "audit-log",
                "name": "Get Guild Audit Log",
                "method": "GET",
                "url": "/guilds/{guild.id}/audit-logs",
                "description": "audit log",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "user_id": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "filter the log for actions made by a user"
                    },
                    "action_type": {
                        "location": "query",
                        "type": "integer",
                        "description": "the type of audit log event"
                    },
                    "before": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "filter the log before a certain entry id"
                    },
                    "limit": {
                        "location": "query",
                        "type": "integer",
                        "description": "how many entries are returned (default 50, minimum 1, maximum 100)"
                    }
                },
                "parametersArray": false
            }
        },
        "channel": {
            "getChannel": {
                "link": "https://discordapp.com/developers/docs/resources/channel#get-channel",
                "resource": "channel",
                "name": "Get Channel",
                "method": "GET",
                "url": "/channels/{channel.id}",
                "description": "channel",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "modifyChannel": {
                "link": "https://discordapp.com/developers/docs/resources/channel#modify-channel",
                "resource": "channel",
                "name": "Modify Channel",
                "method": "PATCH",
                "url": "/channels/{channel.id}",
                "description": "channel",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "channel name (1-100 characters)"
                    },
                    "type": {
                        "location": "json",
                        "type": "integer",
                        "description": "the type of channel"
                    },
                    "topic": {
                        "location": "json",
                        "type": "string",
                        "description": "channel topic (0-1024 characters)"
                    },
                    "bitrate": {
                        "location": "json",
                        "type": "integer",
                        "description": "the bitrate (in bits) of the voice channel (voice only)"
                    },
                    "user_limit": {
                        "location": "json",
                        "type": "integer",
                        "description": "the user limit of the voice channel (voice only)"
                    },
                    "rate_limit_per_user": {
                        "location": "json",
                        "type": "integer",
                        "description": "amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission manage_messages or manage_channel, are unaffected"
                    },
                    "position": {
                        "location": "json",
                        "type": "integer",
                        "description": "sorting position of the channel"
                    },
                    "permission_overwrites": {
                        "location": "json",
                        "type": "array",
                        "description": "the channel's permission overwrites"
                    },
                    "parent_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id of the parent category for a channel"
                    },
                    "nsfw": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the channel is nsfw",
                        "default": false
                    }
                },
                "parametersArray": false
            },
            "deleteOrcloseChannel": {
                "link": "https://discordapp.com/developers/docs/resources/channel#delete/close-channel",
                "resource": "channel",
                "name": "Delete/Close Channel",
                "method": "DELETE",
                "url": "/channels/{channel.id}",
                "description": "Channel Update",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getChannelMessages": {
                "link": "https://discordapp.com/developers/docs/resources/channel#get-channel-messages",
                "resource": "channel",
                "name": "Get Channel Messages",
                "method": "GET",
                "url": "/channels/{channel.id}/messages",
                "description": "message",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "around": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "get messages around this message ID",
                        "required": false
                    },
                    "before": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "get messages before this message ID",
                        "required": false
                    },
                    "after": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "get messages after this message ID",
                        "required": false
                    },
                    "limit": {
                        "location": "query",
                        "type": "integer",
                        "description": "max number of messages to return (1-100)",
                        "default": 50,
                        "required": false
                    }
                },
                "parametersArray": false
            },
            "getChannelMessage": {
                "link": "https://discordapp.com/developers/docs/resources/channel#get-channel-message",
                "resource": "channel",
                "name": "Get Channel Message",
                "method": "GET",
                "url": "/channels/{channel.id}/messages/{message.id}",
                "description": "message",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "message.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "createMessage": {
                "link": "https://discordapp.com/developers/docs/resources/channel#create-message",
                "resource": "channel",
                "name": "Create Message",
                "method": "POST",
                "url": "/channels/{channel.id}/messages",
                "description": "message",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "content": {
                        "location": "json",
                        "type": "string",
                        "description": "the message contents (up to 2000 characters)",
                        "required": false
                    },
                    "tts": {
                        "location": "json",
                        "type": "boolean",
                        "description": "true if this is a TTS message",
                        "default": false,
                        "required": false
                    },
                    "embeds": {
                        "location": "json",
                        "type": "array",
                        "description": "embedded rich content (up to 6000 characters)",
                        "required": false
                    },
                    "embed (deprecated)": {
                        "location": "json",
                        "type": "object",
                        "description": "embedded rich content, deprecated in favor of embeds",
                        "required": false
                    },
                    "allowed_mentions": {
                        "location": "json",
                        "type": "object",
                        "description": "allowed mentions for the message",
                        "required": false
                    },
                    "message_reference": {
                        "location": "json",
                        "type": "message reference",
                        "description": "include to make your message a reply",
                        "required": false
                    },
                    "components": {
                        "location": "json",
                        "type": "array",
                        "description": "the components to include with the message",
                        "required": false
                    },
                    "sticker_ids": {
                        "location": "json",
                        "type": "array",
                        "description": "IDs of up to 3 stickers in the server to send in the message",
                        "required": false
                    },
                    "files": {
                        "location": "json",
                        "type": "file contents",
                        "description": "the contents of the file being sent",
                        "required": false
                    },
                    "payload_json": {
                        "location": "json",
                        "type": "string",
                        "description": "JSON encoded body of non-file params",
                        "required": false
                    },
                    "attachments": {
                        "location": "json",
                        "type": "array",
                        "description": "attachment objects with filename and description",
                        "required": false
                    }
                },
                "parametersArray": false
            },
            "crosspostMessage": {
                "link": "https://discordapp.com/developers/docs/resources/channel#crosspost-message",
                "resource": "channel",
                "name": "Crosspost Message",
                "method": "POST",
                "url": "/channels/{channel.id}/messages/{message.id}/crosspost",
                "description": "message",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "message.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "createReaction": {
                "link": "https://discordapp.com/developers/docs/resources/channel#create-reaction",
                "resource": "channel",
                "name": "Create Reaction",
                "method": "PUT",
                "url": "/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/@me",
                "description": "URL Encoded",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "message.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "emoji": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "deleteOwnReaction": {
                "link": "https://discordapp.com/developers/docs/resources/channel#delete-own-reaction",
                "resource": "channel",
                "name": "Delete Own Reaction",
                "method": "DELETE",
                "url": "/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/@me",
                "description": "URL Encoded",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "message.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "emoji": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "deleteUserReaction": {
                "link": "https://discordapp.com/developers/docs/resources/channel#delete-user-reaction",
                "resource": "channel",
                "name": "Delete User Reaction",
                "method": "DELETE",
                "url": "/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/{user.id}",
                "description": "URL Encoded",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "message.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "emoji": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    },
                    "user.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getReactions": {
                "link": "https://discordapp.com/developers/docs/resources/channel#get-reactions",
                "resource": "channel",
                "name": "Get Reactions",
                "method": "GET",
                "url": "/channels/{channel.id}/messages/{message.id}/reactions/{emoji}",
                "description": "user",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "message.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "emoji": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    },
                    "after": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "get users after this user ID",
                        "required": false
                    },
                    "limit": {
                        "location": "query",
                        "type": "integer",
                        "description": "max number of users to return (1-100)",
                        "default": 25,
                        "required": false
                    }
                },
                "parametersArray": false
            },
            "deleteAllReactions": {
                "link": "https://discordapp.com/developers/docs/resources/channel#delete-all-reactions",
                "resource": "channel",
                "name": "Delete All Reactions",
                "method": "DELETE",
                "url": "/channels/{channel.id}/messages/{message.id}/reactions",
                "description": "Message Reaction Remove All",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "message.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "deleteAllReactionsForEmoji": {
                "link": "https://discordapp.com/developers/docs/resources/channel#delete-all-reactions-for-emoji",
                "resource": "channel",
                "name": "Delete All Reactions for Emoji",
                "method": "DELETE",
                "url": "/channels/{channel.id}/messages/{message.id}/reactions/{emoji}",
                "description": "Message Reaction Remove Emoji",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "message.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "emoji": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "editMessage": {
                "link": "https://discordapp.com/developers/docs/resources/channel#edit-message",
                "resource": "channel",
                "name": "Edit Message",
                "method": "PATCH",
                "url": "/channels/{channel.id}/messages/{message.id}",
                "description": "default",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "message.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "content": {
                        "location": "json",
                        "type": "string",
                        "description": "the message contents (up to 2000 characters)"
                    },
                    "embeds": {
                        "location": "json",
                        "type": "array",
                        "description": "embedded rich content (up to 6000 characters)"
                    },
                    "embed (deprecated)": {
                        "location": "json",
                        "type": "object",
                        "description": "embedded rich content, deprecated in favor of embeds"
                    },
                    "flags": {
                        "location": "json",
                        "type": "integer",
                        "description": "edit the flags of a message (only SUPPRESS_EMBEDS can currently be set/unset)"
                    },
                    "allowed_mentions": {
                        "location": "json",
                        "type": "object",
                        "description": "allowed mentions for the message"
                    },
                    "components": {
                        "location": "json",
                        "type": "array",
                        "description": "the components to include with the message"
                    },
                    "files": {
                        "location": "json",
                        "type": "file contents",
                        "description": "the contents of the file being sent/edited"
                    },
                    "payload_json": {
                        "location": "json",
                        "type": "string",
                        "description": "JSON encoded body of non-file params (multipart/form-data only)"
                    },
                    "attachments": {
                        "location": "json",
                        "type": "array",
                        "description": "attached files to keep and possible descriptions for new files"
                    }
                },
                "parametersArray": false
            },
            "deleteMessage": {
                "link": "https://discordapp.com/developers/docs/resources/channel#delete-message",
                "resource": "channel",
                "name": "Delete Message",
                "method": "DELETE",
                "url": "/channels/{channel.id}/messages/{message.id}",
                "description": "Message Delete",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "message.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "bulkDeleteMessages": {
                "link": "https://discordapp.com/developers/docs/resources/channel#bulk-delete-messages",
                "resource": "channel",
                "name": "Bulk Delete Messages",
                "method": "POST",
                "url": "/channels/{channel.id}/messages/bulk-delete",
                "description": "Message Delete Bulk",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "messages": {
                        "location": "json",
                        "type": "array",
                        "description": "an array of message ids to delete (2-100)"
                    }
                },
                "parametersArray": false
            },
            "editChannelPermissions": {
                "link": "https://discordapp.com/developers/docs/resources/channel#edit-channel-permissions",
                "resource": "channel",
                "name": "Edit Channel Permissions",
                "method": "PUT",
                "url": "/channels/{channel.id}/permissions/{overwrite.id}",
                "description": "permissions",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "overwrite.id": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    },
                    "allow": {
                        "location": "json",
                        "type": "string",
                        "description": "the bitwise value of all allowed permissions"
                    },
                    "deny": {
                        "location": "json",
                        "type": "string",
                        "description": "the bitwise value of all disallowed permissions"
                    },
                    "type": {
                        "location": "json",
                        "type": "integer",
                        "description": "0 for a role or 1 for a member"
                    }
                },
                "parametersArray": false
            },
            "getChannelInvites": {
                "link": "https://discordapp.com/developers/docs/resources/channel#get-channel-invites",
                "resource": "channel",
                "name": "Get Channel Invites",
                "method": "GET",
                "url": "/channels/{channel.id}/invites",
                "description": "invite",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "createChannelInvite": {
                "link": "https://discordapp.com/developers/docs/resources/channel#create-channel-invite",
                "resource": "channel",
                "name": "Create Channel Invite",
                "method": "POST",
                "url": "/channels/{channel.id}/invites",
                "description": "invite",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "max_age": {
                        "location": "json",
                        "type": "integer",
                        "description": "duration of invite in seconds before expiry, or 0 for never. between 0 and 604800 (7 days)",
                        "default": 86400
                    },
                    "max_uses": {
                        "location": "json",
                        "type": "integer",
                        "description": "max number of uses or 0 for unlimited. between 0 and 100",
                        "default": 0
                    },
                    "temporary": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this invite only grants temporary membership",
                        "default": false
                    },
                    "unique": {
                        "location": "json",
                        "type": "boolean",
                        "description": "if true, don't try to reuse a similar invite (useful for creating many unique one time use invites)",
                        "default": false
                    },
                    "target_type": {
                        "location": "json",
                        "type": "integer",
                        "description": "the type of target for this voice channel invite"
                    },
                    "target_user_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the id of the user whose stream to display for this invite, required if target_type is 1, the user must be streaming in the channel"
                    },
                    "target_application_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the id of the embedded application to open for this invite, required if target_type is 2, the application must have the EMBEDDED flag"
                    }
                },
                "parametersArray": false
            },
            "deleteChannelPermission": {
                "link": "https://discordapp.com/developers/docs/resources/channel#delete-channel-permission",
                "resource": "channel",
                "name": "Delete Channel Permission",
                "method": "DELETE",
                "url": "/channels/{channel.id}/permissions/{overwrite.id}",
                "description": "permissions",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "overwrite.id": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "followNewsChannel": {
                "link": "https://discordapp.com/developers/docs/resources/channel#follow-news-channel",
                "resource": "channel",
                "name": "Follow News Channel",
                "method": "POST",
                "url": "/channels/{channel.id}/followers",
                "description": "followed channel",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "webhook_channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id of target channel"
                    }
                },
                "parametersArray": false
            },
            "triggerTypingIndicator": {
                "link": "https://discordapp.com/developers/docs/resources/channel#trigger-typing-indicator",
                "resource": "channel",
                "name": "Trigger Typing Indicator",
                "method": "POST",
                "url": "/channels/{channel.id}/typing",
                "description": "not",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getPinnedMessages": {
                "link": "https://discordapp.com/developers/docs/resources/channel#get-pinned-messages",
                "resource": "channel",
                "name": "Get Pinned Messages",
                "method": "GET",
                "url": "/channels/{channel.id}/pins",
                "description": "message",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "pinMessage": {
                "link": "https://discordapp.com/developers/docs/resources/channel#pin-message",
                "resource": "channel",
                "name": "Pin Message",
                "method": "PUT",
                "url": "/channels/{channel.id}/pins/{message.id}",
                "description": "",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "message.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "unpinMessage": {
                "link": "https://discordapp.com/developers/docs/resources/channel#unpin-message",
                "resource": "channel",
                "name": "Unpin Message",
                "method": "DELETE",
                "url": "/channels/{channel.id}/pins/{message.id}",
                "description": "",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "message.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "groupDmAddRecipient": {
                "link": "https://discordapp.com/developers/docs/resources/channel#group-dm-add-recipient",
                "resource": "channel",
                "name": "Group DM Add Recipient",
                "method": "PUT",
                "url": "/channels/{channel.id}/recipients/{user.id}",
                "description": "",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "user.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "access_token": {
                        "location": "json",
                        "type": "string",
                        "description": "access token of a user that has granted your app the gdm.join scope"
                    },
                    "nick": {
                        "location": "json",
                        "type": "string",
                        "description": "nickname of the user being added"
                    }
                },
                "parametersArray": false
            },
            "groupDmRemoveRecipient": {
                "link": "https://discordapp.com/developers/docs/resources/channel#group-dm-remove-recipient",
                "resource": "channel",
                "name": "Group DM Remove Recipient",
                "method": "DELETE",
                "url": "/channels/{channel.id}/recipients/{user.id}",
                "description": "",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "user.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "startThreadWithMessage": {
                "link": "https://discordapp.com/developers/docs/resources/channel#start-thread-with-message",
                "resource": "channel",
                "name": "Start Thread with Message",
                "method": "POST",
                "url": "/channels/{channel.id}/messages/{message.id}/threads",
                "description": "channel",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "message.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "1-100 character channel name"
                    },
                    "auto_archive_duration": {
                        "location": "json",
                        "type": "integer",
                        "description": "duration in minutes to automatically archive the thread after recent activity, can be set to: 60, 1440, 4320, 10080"
                    },
                    "rate_limit_per_user": {
                        "location": "json",
                        "type": "integer",
                        "nullable": true,
                        "description": "amount of seconds a user has to wait before sending another message (0-21600)"
                    }
                },
                "parametersArray": false
            },
            "startThreadWithoutMessage": {
                "link": "https://discordapp.com/developers/docs/resources/channel#start-thread-without-message",
                "resource": "channel",
                "name": "Start Thread without Message",
                "method": "POST",
                "url": "/channels/{channel.id}/threads",
                "description": "channel",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "1-100 character channel name"
                    },
                    "auto_archive_duration": {
                        "location": "json",
                        "type": "integer",
                        "description": "duration in minutes to automatically archive the thread after recent activity, can be set to: 60, 1440, 4320, 10080"
                    },
                    "type": {
                        "location": "json",
                        "type": "integer",
                        "description": "the type of thread to create"
                    },
                    "invitable": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether non-moderators can add other non-moderators to a thread; only available when creating a private thread",
                        "default": false
                    },
                    "rate_limit_per_user": {
                        "location": "json",
                        "type": "integer",
                        "nullable": true,
                        "description": "amount of seconds a user has to wait before sending another message (0-21600)"
                    }
                },
                "parametersArray": false
            },
            "joinThread": {
                "link": "https://discordapp.com/developers/docs/resources/channel#join-thread",
                "resource": "channel",
                "name": "Join Thread",
                "method": "PUT",
                "url": "/channels/{channel.id}/thread-members/@me",
                "description": "Thread Members Update",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "addThreadMember": {
                "link": "https://discordapp.com/developers/docs/resources/channel#add-thread-member",
                "resource": "channel",
                "name": "Add Thread Member",
                "method": "PUT",
                "url": "/channels/{channel.id}/thread-members/{user.id}",
                "description": "Thread Members Update",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "user.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "leaveThread": {
                "link": "https://discordapp.com/developers/docs/resources/channel#leave-thread",
                "resource": "channel",
                "name": "Leave Thread",
                "method": "DELETE",
                "url": "/channels/{channel.id}/thread-members/@me",
                "description": "Thread Members Update",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "removeThreadMember": {
                "link": "https://discordapp.com/developers/docs/resources/channel#remove-thread-member",
                "resource": "channel",
                "name": "Remove Thread Member",
                "method": "DELETE",
                "url": "/channels/{channel.id}/thread-members/{user.id}",
                "description": "Thread Members Update",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "user.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getThreadMember": {
                "link": "https://discordapp.com/developers/docs/resources/channel#get-thread-member",
                "resource": "channel",
                "name": "Get Thread Member",
                "method": "GET",
                "url": "/channels/{channel.id}/thread-members/{user.id}",
                "description": "thread member",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "user.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "listThreadMembers": {
                "link": "https://discordapp.com/developers/docs/resources/channel#list-thread-members",
                "resource": "channel",
                "name": "List Thread Members",
                "method": "GET",
                "url": "/channels/{channel.id}/thread-members",
                "description": "thread members",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "listActiveThreads": {
                "link": "https://discordapp.com/developers/docs/resources/channel#list-active-threads",
                "resource": "channel",
                "name": "List Active Threads",
                "method": "GET",
                "url": "/channels/{channel.id}/threads/active",
                "description": "List Active Guild Threads",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "listPublicArchivedThreads": {
                "link": "https://discordapp.com/developers/docs/resources/channel#list-public-archived-threads",
                "resource": "channel",
                "name": "List Public Archived Threads",
                "method": "GET",
                "url": "/channels/{channel.id}/threads/archived/public",
                "description": "type",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "before": {
                        "location": "query",
                        "type": "ISO8601 timestamp",
                        "description": "returns threads before this timestamp"
                    },
                    "limit": {
                        "location": "query",
                        "type": "integer",
                        "description": "optional maximum number of threads to return"
                    }
                },
                "parametersArray": false
            },
            "listPrivateArchivedThreads": {
                "link": "https://discordapp.com/developers/docs/resources/channel#list-private-archived-threads",
                "resource": "channel",
                "name": "List Private Archived Threads",
                "method": "GET",
                "url": "/channels/{channel.id}/threads/archived/private",
                "description": "type",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "before": {
                        "location": "query",
                        "type": "ISO8601 timestamp",
                        "description": "returns threads before this timestamp"
                    },
                    "limit": {
                        "location": "query",
                        "type": "integer",
                        "description": "optional maximum number of threads to return"
                    }
                },
                "parametersArray": false
            },
            "listJoinedPrivateArchivedThreads": {
                "link": "https://discordapp.com/developers/docs/resources/channel#list-joined-private-archived-threads",
                "resource": "channel",
                "name": "List Joined Private Archived Threads",
                "method": "GET",
                "url": "/channels/{channel.id}/users/@me/threads/archived/private",
                "description": "type",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "before": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "returns threads before this id"
                    },
                    "limit": {
                        "location": "query",
                        "type": "integer",
                        "description": "optional maximum number of threads to return"
                    }
                },
                "parametersArray": false
            }
        },
        "emoji": {
            "listGuildEmojis": {
                "link": "https://discordapp.com/developers/docs/resources/emoji#list-guild-emojis",
                "resource": "emoji",
                "name": "List Guild Emojis",
                "method": "GET",
                "url": "/guilds/{guild.id}/emojis",
                "description": "emoji",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getGuildEmoji": {
                "link": "https://discordapp.com/developers/docs/resources/emoji#get-guild-emoji",
                "resource": "emoji",
                "name": "Get Guild Emoji",
                "method": "GET",
                "url": "/guilds/{guild.id}/emojis/{emoji.id}",
                "description": "emoji",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "emoji.id": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "createGuildEmoji": {
                "link": "https://discordapp.com/developers/docs/resources/emoji#create-guild-emoji",
                "resource": "emoji",
                "name": "Create Guild Emoji",
                "method": "POST",
                "url": "/guilds/{guild.id}/emojis",
                "description": "emoji",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "name of the emoji"
                    },
                    "image": {
                        "location": "json",
                        "type": "image data",
                        "description": "the 128x128 emoji image"
                    },
                    "roles": {
                        "location": "json",
                        "type": "array",
                        "description": "roles allowed to use this emoji"
                    }
                },
                "parametersArray": false
            },
            "modifyGuildEmoji": {
                "link": "https://discordapp.com/developers/docs/resources/emoji#modify-guild-emoji",
                "resource": "emoji",
                "name": "Modify Guild Emoji",
                "method": "PATCH",
                "url": "/guilds/{guild.id}/emojis/{emoji.id}",
                "description": "emoji",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "emoji.id": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "name of the emoji"
                    },
                    "roles": {
                        "location": "json",
                        "type": "array",
                        "nullable": true,
                        "description": "roles allowed to use this emoji"
                    }
                },
                "parametersArray": false
            },
            "deleteGuildEmoji": {
                "link": "https://discordapp.com/developers/docs/resources/emoji#delete-guild-emoji",
                "resource": "emoji",
                "name": "Delete Guild Emoji",
                "method": "DELETE",
                "url": "/guilds/{guild.id}/emojis/{emoji.id}",
                "description": "Guild Emojis Update",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "emoji.id": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            }
        },
        "guildScheduledEvent": {
            "listScheduledEventsForGuild": {
                "link": "https://discordapp.com/developers/docs/resources/guild-scheduled-event#list-scheduled-events-for-guild",
                "resource": "guild-scheduled-event",
                "name": "List Scheduled Events for Guild",
                "method": "GET",
                "url": "/guilds/{guild.id}/scheduled-events",
                "description": "guild scheduled event",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "with_user_count": {
                        "location": "query",
                        "type": "boolean",
                        "description": "include number of users subscribed to each event",
                        "default": false
                    }
                },
                "parametersArray": false
            },
            "createGuildScheduledEvent": {
                "link": "https://discordapp.com/developers/docs/resources/guild-scheduled-event#create-guild-scheduled-event",
                "resource": "guild-scheduled-event",
                "name": "Create Guild Scheduled Event",
                "method": "POST",
                "url": "/guilds/{guild.id}/scheduled-events",
                "description": "guild scheduled event",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "channel_id": {
                        "location": "json",
                        "type": "snowflake *",
                        "description": "the channel id of the scheduled event."
                    },
                    "entity_metadata": {
                        "location": "json",
                        "type": "array",
                        "description": "the entity metadata of the scheduled event"
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "the name of the scheduled event"
                    },
                    "privacy_level": {
                        "location": "json",
                        "type": "integer",
                        "description": "the privacy level of the scheduled event"
                    },
                    "scheduled_start_time": {
                        "location": "json",
                        "type": "string",
                        "description": "the time to schedule the scheduled event (ISO8601 timestamp)"
                    },
                    "scheduled_end_time": {
                        "location": "json",
                        "type": "string",
                        "description": "the time when the scheduled event is scheduled to end (ISO8601 timestamp)"
                    },
                    "description": {
                        "location": "json",
                        "type": "string",
                        "description": "the description of the scheduled event"
                    },
                    "entity_type": {
                        "location": "json",
                        "type": "integer",
                        "description": "the entity type of the scheduled event"
                    }
                },
                "parametersArray": false
            },
            "getGuildScheduledEvent": {
                "link": "https://discordapp.com/developers/docs/resources/guild-scheduled-event#get-guild-scheduled-event",
                "resource": "guild-scheduled-event",
                "name": "Get Guild Scheduled Event",
                "method": "GET",
                "url": "/guilds/{guild.id}/scheduled-events/{guild_scheduled_event.id}",
                "description": "guild scheduled event",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "modifyGuildScheduledEvent": {
                "link": "https://discordapp.com/developers/docs/resources/guild-scheduled-event#modify-guild-scheduled-event",
                "resource": "guild-scheduled-event",
                "name": "Modify Guild Scheduled Event",
                "method": "PATCH",
                "url": "/guilds/{guild.id}/scheduled-events/{guild_scheduled_event.id}",
                "description": "guild scheduled event",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the channel id of the scheduled event, set to null if changing entity type to EXTERNAL"
                    },
                    "entity_metadata": {
                        "location": "json",
                        "type": "array",
                        "description": "the entity metadata of the scheduled event"
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "the name of the scheduled event"
                    },
                    "privacy_level": {
                        "location": "json",
                        "type": "integer",
                        "description": "the privacy level of the scheduled event"
                    },
                    "scheduled_start_time": {
                        "location": "json",
                        "type": "string",
                        "description": "the time to schedule the scheduled event"
                    },
                    "scheduled_end_time": {
                        "location": "json",
                        "type": "string",
                        "description": "the time when the scheduled event is scheduled to end"
                    },
                    "description": {
                        "location": "json",
                        "type": "string",
                        "description": "the description of the scheduled event"
                    },
                    "entity_type": {
                        "location": "json",
                        "type": "integer",
                        "description": "the entity type of the scheduled event"
                    },
                    "status": {
                        "location": "json",
                        "type": "integer",
                        "description": "the status of the scheduled event"
                    }
                },
                "parametersArray": false
            },
            "deleteGuildScheduledEvent": {
                "link": "https://discordapp.com/developers/docs/resources/guild-scheduled-event#delete-guild-scheduled-event",
                "resource": "guild-scheduled-event",
                "name": "Delete Guild Scheduled Event",
                "method": "DELETE",
                "url": "/guilds/{guild.id}/scheduled-events/{guild_scheduled_event.id}",
                "description": "",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getGuildScheduledEventUsers": {
                "link": "https://discordapp.com/developers/docs/resources/guild-scheduled-event#get-guild-scheduled-event-users",
                "resource": "guild-scheduled-event",
                "name": "Get Guild Scheduled Event Users",
                "method": "GET",
                "url": "/guilds/{guild.id}/scheduled-events/{guild_scheduled_event.id}/users",
                "description": "guild scheduled event user",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "limit": {
                        "location": "query",
                        "type": "number",
                        "description": "how many users to receive from the event",
                        "default": "100"
                    },
                    "with_member": {
                        "location": "query",
                        "type": "boolean",
                        "description": "include guild member data if it exists",
                        "default": false
                    },
                    "before": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "consider only users before given user id"
                    },
                    "after": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "consider only users after given user id"
                    }
                },
                "parametersArray": false
            }
        },
        "guildTemplate": {
            "getGuildTemplate": {
                "link": "https://discordapp.com/developers/docs/resources/guild-template#get-guild-template",
                "resource": "guild-template",
                "name": "Get Guild Template",
                "method": "GET",
                "url": "/guilds/templates/{template.code}",
                "description": "guild template",
                "parameters": {
                    "template.code": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "createGuildFromGuildTemplate": {
                "link": "https://discordapp.com/developers/docs/resources/guild-template#create-guild-from-guild-template",
                "resource": "guild-template",
                "name": "Create Guild from Guild Template",
                "method": "POST",
                "url": "/guilds/templates/{template.code}",
                "description": "guild",
                "parameters": {
                    "template.code": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "name of the guild (2-100 characters)"
                    },
                    "icon": {
                        "location": "json",
                        "type": "image data",
                        "description": "base64 128x128 image for the guild icon"
                    }
                },
                "parametersArray": false
            },
            "getGuildTemplates": {
                "link": "https://discordapp.com/developers/docs/resources/guild-template#get-guild-templates",
                "resource": "guild-template",
                "name": "Get Guild Templates",
                "method": "GET",
                "url": "/guilds/{guild.id}/templates",
                "description": "guild template",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "createGuildTemplate": {
                "link": "https://discordapp.com/developers/docs/resources/guild-template#create-guild-template",
                "resource": "guild-template",
                "name": "Create Guild Template",
                "method": "POST",
                "url": "/guilds/{guild.id}/templates",
                "description": "guild template",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "name of the template (1-100 characters)"
                    },
                    "description": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "description for the template (0-120 characters)"
                    }
                },
                "parametersArray": false
            },
            "syncGuildTemplate": {
                "link": "https://discordapp.com/developers/docs/resources/guild-template#sync-guild-template",
                "resource": "guild-template",
                "name": "Sync Guild Template",
                "method": "PUT",
                "url": "/guilds/{guild.id}/templates/{template.code}",
                "description": "guild template",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "template.code": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "modifyGuildTemplate": {
                "link": "https://discordapp.com/developers/docs/resources/guild-template#modify-guild-template",
                "resource": "guild-template",
                "name": "Modify Guild Template",
                "method": "PATCH",
                "url": "/guilds/{guild.id}/templates/{template.code}",
                "description": "guild template",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "template.code": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "name of the template (1-100 characters)"
                    },
                    "description": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "description for the template (0-120 characters)"
                    }
                },
                "parametersArray": false
            },
            "deleteGuildTemplate": {
                "link": "https://discordapp.com/developers/docs/resources/guild-template#delete-guild-template",
                "resource": "guild-template",
                "name": "Delete Guild Template",
                "method": "DELETE",
                "url": "/guilds/{guild.id}/templates/{template.code}",
                "description": "guild template",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "template.code": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            }
        },
        "invite": {
            "getInvite": {
                "link": "https://discordapp.com/developers/docs/resources/invite#get-invite",
                "resource": "invite",
                "name": "Get Invite",
                "method": "GET",
                "url": "/invites/{invite.code}",
                "description": "invite",
                "parameters": {
                    "invite.code": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    },
                    "with_counts": {
                        "location": "query",
                        "type": "boolean",
                        "description": "whether the invite should contain approximate member counts",
                        "default": false
                    },
                    "with_expiration": {
                        "location": "query",
                        "type": "boolean",
                        "description": "whether the invite should contain the expiration date",
                        "default": false
                    },
                    "guild_scheduled_event_id": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "the guild scheduled event to include with the invite"
                    }
                },
                "parametersArray": false
            },
            "deleteInvite": {
                "link": "https://discordapp.com/developers/docs/resources/invite#delete-invite",
                "resource": "invite",
                "name": "Delete Invite",
                "method": "DELETE",
                "url": "/invites/{invite.code}",
                "description": "invite",
                "parameters": {
                    "invite.code": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            }
        },
        "stageInstance": {
            "createStageInstance": {
                "link": "https://discordapp.com/developers/docs/resources/stage-instance#create-stage-instance",
                "resource": "stage-instance",
                "name": "Create Stage Instance",
                "method": "POST",
                "url": "/stage-instances",
                "description": "privacy level",
                "parameters": {
                    "channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "The id of the Stage channel"
                    },
                    "topic": {
                        "location": "json",
                        "type": "string",
                        "description": "The topic of the Stage instance (1-120 characters)"
                    },
                    "privacy_level": {
                        "location": "json",
                        "type": "integer",
                        "description": "The privacy level of the Stage instance (default GUILD_ONLY)"
                    }
                },
                "parametersArray": false
            },
            "getStageInstance": {
                "link": "https://discordapp.com/developers/docs/resources/stage-instance#get-stage-instance",
                "resource": "stage-instance",
                "name": "Get Stage Instance",
                "method": "GET",
                "url": "/stage-instances/{channel.id}",
                "description": "",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "modifyStageInstance": {
                "link": "https://discordapp.com/developers/docs/resources/stage-instance#modify-stage-instance",
                "resource": "stage-instance",
                "name": "Modify Stage Instance",
                "method": "PATCH",
                "url": "/stage-instances/{channel.id}",
                "description": "privacy level",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "topic": {
                        "location": "json",
                        "type": "string",
                        "description": "The topic of the Stage instance (1-120 characters)"
                    },
                    "privacy_level": {
                        "location": "json",
                        "type": "integer",
                        "description": "The privacy level of the Stage instance"
                    }
                },
                "parametersArray": false
            },
            "deleteStageInstance": {
                "link": "https://discordapp.com/developers/docs/resources/stage-instance#delete-stage-instance",
                "resource": "stage-instance",
                "name": "Delete Stage Instance",
                "method": "DELETE",
                "url": "/stage-instances/{channel.id}",
                "description": "",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            }
        },
        "sticker": {
            "getSticker": {
                "link": "https://discordapp.com/developers/docs/resources/sticker#get-sticker",
                "resource": "sticker",
                "name": "Get Sticker",
                "method": "GET",
                "url": "/stickers/{sticker.id}",
                "description": "sticker",
                "parameters": {
                    "sticker.id": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "listNitroStickerPacks": {
                "link": "https://discordapp.com/developers/docs/resources/sticker#list-nitro-sticker-packs",
                "resource": "sticker",
                "name": "List Nitro Sticker Packs",
                "method": "GET",
                "url": "/sticker-packs",
                "description": "sticker pack",
                "parameters": {
                    "sticker_packs": {
                        "location": "json",
                        "type": "array"
                    }
                },
                "parametersArray": false
            },
            "listGuildStickers": {
                "link": "https://discordapp.com/developers/docs/resources/sticker#list-guild-stickers",
                "resource": "sticker",
                "name": "List Guild Stickers",
                "method": "GET",
                "url": "/guilds/{guild.id}/stickers",
                "description": "sticker",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getGuildSticker": {
                "link": "https://discordapp.com/developers/docs/resources/sticker#get-guild-sticker",
                "resource": "sticker",
                "name": "Get Guild Sticker",
                "method": "GET",
                "url": "/guilds/{guild.id}/stickers/{sticker.id}",
                "description": "sticker",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "sticker.id": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "createGuildSticker": {
                "link": "https://discordapp.com/developers/docs/resources/sticker#create-guild-sticker",
                "resource": "sticker",
                "name": "Create Guild Sticker",
                "method": "POST",
                "url": "/guilds/{guild.id}/stickers",
                "description": "sticker",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "name of the sticker (2-30 characters)"
                    },
                    "description": {
                        "location": "json",
                        "type": "string",
                        "description": "description of the sticker (empty or 2-100 characters)"
                    },
                    "tags": {
                        "location": "json",
                        "type": "string",
                        "description": "autocomplete/suggestion tags for the sticker (max 200 characters)"
                    },
                    "file": {
                        "location": "json",
                        "type": "file contents",
                        "description": "the sticker file to upload, must be a PNG, APNG, or Lottie JSON file, max 500 KB"
                    }
                },
                "parametersArray": false
            },
            "modifyGuildSticker": {
                "link": "https://discordapp.com/developers/docs/resources/sticker#modify-guild-sticker",
                "resource": "sticker",
                "name": "Modify Guild Sticker",
                "method": "PATCH",
                "url": "/guilds/{guild.id}/stickers/{sticker.id}",
                "description": "sticker",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "sticker.id": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "name of the sticker (2-30 characters)"
                    },
                    "description": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "description of the sticker (2-100 characters)"
                    },
                    "tags": {
                        "location": "json",
                        "type": "string",
                        "description": "autocomplete/suggestion tags for the sticker (max 200 characters)"
                    }
                },
                "parametersArray": false
            },
            "deleteGuildSticker": {
                "link": "https://discordapp.com/developers/docs/resources/sticker#delete-guild-sticker",
                "resource": "sticker",
                "name": "Delete Guild Sticker",
                "method": "DELETE",
                "url": "/guilds/{guild.id}/stickers/{sticker.id}",
                "description": "",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "sticker.id": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            }
        },
        "user": {
            "getCurrentUser": {
                "link": "https://discordapp.com/developers/docs/resources/user#get-current-user",
                "resource": "user",
                "name": "Get Current User",
                "method": "GET",
                "url": "/users/@me",
                "description": "user",
                "parameters": {},
                "parametersArray": false
            },
            "getUser": {
                "link": "https://discordapp.com/developers/docs/resources/user#get-user",
                "resource": "user",
                "name": "Get User",
                "method": "GET",
                "url": "/users/{user.id}",
                "description": "user",
                "parameters": {
                    "user.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "modifyCurrentUser": {
                "link": "https://discordapp.com/developers/docs/resources/user#modify-current-user",
                "resource": "user",
                "name": "Modify Current User",
                "method": "PATCH",
                "url": "/users/@me",
                "description": "user",
                "parameters": {
                    "username": {
                        "location": "json",
                        "type": "string",
                        "description": "user's username, if changed may cause the user's discriminator to be randomized."
                    },
                    "avatar": {
                        "location": "json",
                        "type": "image data",
                        "nullable": true,
                        "description": "if passed, modifies the user's avatar"
                    }
                },
                "parametersArray": false
            },
            "getCurrentUserGuilds": {
                "link": "https://discordapp.com/developers/docs/resources/user#get-current-user-guilds",
                "resource": "user",
                "name": "Get Current User Guilds",
                "method": "GET",
                "url": "/users/@me/guilds",
                "description": "guild",
                "parameters": {
                    "before": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "get guilds before this guild ID",
                        "required": false
                    },
                    "after": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "get guilds after this guild ID",
                        "required": false
                    },
                    "limit": {
                        "location": "query",
                        "type": "integer",
                        "description": "max number of guilds to return (1-200)",
                        "default": 200,
                        "required": false
                    }
                },
                "parametersArray": false
            },
            "leaveGuild": {
                "link": "https://discordapp.com/developers/docs/resources/user#leave-guild",
                "resource": "user",
                "name": "Leave Guild",
                "method": "DELETE",
                "url": "/users/@me/guilds/{guild.id}",
                "description": "",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "createDm": {
                "link": "https://discordapp.com/developers/docs/resources/user#create-dm",
                "resource": "user",
                "name": "Create DM",
                "method": "POST",
                "url": "/users/@me/channels",
                "description": "DM channel",
                "parameters": {
                    "recipient_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the recipient to open a DM channel with"
                    }
                },
                "parametersArray": false
            },
            "createGroupDm": {
                "link": "https://discordapp.com/developers/docs/resources/user#create-group-dm",
                "resource": "user",
                "name": "Create Group DM",
                "method": "POST",
                "url": "/users/@me/channels",
                "description": "DM channel",
                "parameters": {
                    "access_tokens": {
                        "location": "json",
                        "type": "array",
                        "description": "access tokens of users that have granted your app the gdm.join scope"
                    },
                    "nicks": {
                        "location": "json",
                        "type": "dict",
                        "description": "a dictionary of user ids to their respective nicknames"
                    }
                },
                "parametersArray": false
            },
            "getUserConnections": {
                "link": "https://discordapp.com/developers/docs/resources/user#get-user-connections",
                "resource": "user",
                "name": "Get User Connections",
                "method": "GET",
                "url": "/users/@me/connections",
                "description": "connection",
                "parameters": {},
                "parametersArray": false
            }
        },
        "voice": {
            "listVoiceRegions": {
                "link": "https://discordapp.com/developers/docs/resources/voice#list-voice-regions",
                "resource": "voice",
                "name": "List Voice Regions",
                "method": "GET",
                "url": "/voice/regions",
                "description": "voice region",
                "parameters": {},
                "parametersArray": false
            }
        },
        "webhook": {
            "createWebhook": {
                "link": "https://discordapp.com/developers/docs/resources/webhook#create-webhook",
                "resource": "webhook",
                "name": "Create Webhook",
                "method": "POST",
                "url": "/channels/{channel.id}/webhooks",
                "description": "webhook",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "name of the webhook (1-80 characters)"
                    },
                    "avatar": {
                        "location": "json",
                        "type": "image data",
                        "nullable": true,
                        "description": "image for the default webhook avatar"
                    }
                },
                "parametersArray": false
            },
            "getChannelWebhooks": {
                "link": "https://discordapp.com/developers/docs/resources/webhook#get-channel-webhooks",
                "resource": "webhook",
                "name": "Get Channel Webhooks",
                "method": "GET",
                "url": "/channels/{channel.id}/webhooks",
                "description": "webhook",
                "parameters": {
                    "channel.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getGuildWebhooks": {
                "link": "https://discordapp.com/developers/docs/resources/webhook#get-guild-webhooks",
                "resource": "webhook",
                "name": "Get Guild Webhooks",
                "method": "GET",
                "url": "/guilds/{guild.id}/webhooks",
                "description": "webhook",
                "parameters": {
                    "guild.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getWebhook": {
                "link": "https://discordapp.com/developers/docs/resources/webhook#get-webhook",
                "resource": "webhook",
                "name": "Get Webhook",
                "method": "GET",
                "url": "/webhooks/{webhook.id}",
                "description": "webhook",
                "parameters": {
                    "webhook.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "getWebhookWithToken": {
                "link": "https://discordapp.com/developers/docs/resources/webhook#get-webhook-with-token",
                "resource": "webhook",
                "name": "Get Webhook with Token",
                "method": "GET",
                "url": "/webhooks/{webhook.id}/{webhook.token}",
                "description": "",
                "parameters": {
                    "webhook.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "webhook.token": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "modifyWebhook": {
                "link": "https://discordapp.com/developers/docs/resources/webhook#modify-webhook",
                "resource": "webhook",
                "name": "Modify Webhook",
                "method": "PATCH",
                "url": "/webhooks/{webhook.id}",
                "description": "webhook",
                "parameters": {
                    "webhook.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "the default name of the webhook"
                    },
                    "avatar": {
                        "location": "json",
                        "type": "image data",
                        "nullable": true,
                        "description": "image for the default webhook avatar"
                    },
                    "channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the new channel id this webhook should be moved to"
                    }
                },
                "parametersArray": false
            },
            "modifyWebhookWithToken": {
                "link": "https://discordapp.com/developers/docs/resources/webhook#modify-webhook-with-token",
                "resource": "webhook",
                "name": "Modify Webhook with Token",
                "method": "PATCH",
                "url": "/webhooks/{webhook.id}/{webhook.token}",
                "description": "",
                "parameters": {
                    "webhook.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "webhook.token": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "deleteWebhook": {
                "link": "https://discordapp.com/developers/docs/resources/webhook#delete-webhook",
                "resource": "webhook",
                "name": "Delete Webhook",
                "method": "DELETE",
                "url": "/webhooks/{webhook.id}",
                "description": "",
                "parameters": {
                    "webhook.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "deleteWebhookWithToken": {
                "link": "https://discordapp.com/developers/docs/resources/webhook#delete-webhook-with-token",
                "resource": "webhook",
                "name": "Delete Webhook with Token",
                "method": "DELETE",
                "url": "/webhooks/{webhook.id}/{webhook.token}",
                "description": "",
                "parameters": {
                    "webhook.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "webhook.token": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    }
                },
                "parametersArray": false
            },
            "executeWebhook": {
                "link": "https://discordapp.com/developers/docs/resources/webhook#execute-webhook",
                "resource": "webhook",
                "name": "Execute Webhook",
                "method": "POST",
                "url": "/webhooks/{webhook.id}/{webhook.token}",
                "description": "Uploading Files",
                "parameters": {
                    "webhook.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "webhook.token": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    },
                    "wait": {
                        "location": "query",
                        "type": "boolean",
                        "description": "waits for server confirmation of message send before response, and returns the created message body (defaults to false; when false a message that is not saved does not return an error)",
                        "default": false,
                        "required": false
                    },
                    "thread_id": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "Send a message to the specified thread within a webhook's channel. The thread will automatically be unarchived.",
                        "required": false
                    },
                    "content": {
                        "location": "json",
                        "type": "string",
                        "description": "the message contents (up to 2000 characters)",
                        "required": false
                    },
                    "username": {
                        "location": "json",
                        "type": "string",
                        "description": "override the default username of the webhook",
                        "required": false
                    },
                    "avatar_url": {
                        "location": "json",
                        "type": "string",
                        "description": "override the default avatar of the webhook",
                        "required": false
                    },
                    "tts": {
                        "location": "json",
                        "type": "boolean",
                        "description": "true if this is a TTS message",
                        "default": false,
                        "required": false
                    },
                    "embeds": {
                        "location": "json",
                        "type": "array",
                        "description": "embedded rich content",
                        "required": false
                    },
                    "allowed_mentions": {
                        "location": "json",
                        "type": "object",
                        "description": "allowed mentions for the message",
                        "required": false
                    },
                    "components": {
                        "location": "json",
                        "type": "array",
                        "description": "the components to include with the message",
                        "required": false
                    },
                    "files": {
                        "location": "json",
                        "type": "file contents",
                        "description": "the contents of the file being sent",
                        "required": false
                    },
                    "payload_json": {
                        "location": "json",
                        "type": "string",
                        "description": "JSON encoded body of non-file params",
                        "required": false
                    },
                    "attachments": {
                        "location": "json",
                        "type": "array",
                        "description": "attachment objects with filename and description",
                        "required": false
                    }
                },
                "parametersArray": false
            },
            "executeSlackCompatibleWebhook": {
                "link": "https://discordapp.com/developers/docs/resources/webhook#execute-slack-compatible-webhook",
                "resource": "webhook",
                "name": "Execute Slack-Compatible Webhook",
                "method": "POST",
                "url": "/webhooks/{webhook.id}/{webhook.token}/slack",
                "description": "Slack's documentation",
                "parameters": {
                    "webhook.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "webhook.token": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    },
                    "thread_id": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "id of the thread to send the message in",
                        "required": false
                    },
                    "wait": {
                        "location": "query",
                        "type": "boolean",
                        "description": "waits for server confirmation of message send before response (defaults to true; when false a message that is not saved does not return an error)",
                        "default": false,
                        "required": false
                    }
                },
                "parametersArray": false
            },
            "executeGithubCompatibleWebhook": {
                "link": "https://discordapp.com/developers/docs/resources/webhook#execute-github-compatible-webhook",
                "resource": "webhook",
                "name": "Execute GitHub-Compatible Webhook",
                "method": "POST",
                "url": "/webhooks/{webhook.id}/{webhook.token}/github",
                "description": "",
                "parameters": {
                    "webhook.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "webhook.token": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    },
                    "thread_id": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "id of the thread to send the message in",
                        "required": false
                    },
                    "wait": {
                        "location": "query",
                        "type": "boolean",
                        "description": "waits for server confirmation of message send before response (defaults to true; when false a message that is not saved does not return an error)",
                        "default": false,
                        "required": false
                    }
                },
                "parametersArray": false
            },
            "getWebhookMessage": {
                "link": "https://discordapp.com/developers/docs/resources/webhook#get-webhook-message",
                "resource": "webhook",
                "name": "Get Webhook Message",
                "method": "GET",
                "url": "/webhooks/{webhook.id}/{webhook.token}/messages/{message.id}",
                "description": "message",
                "parameters": {
                    "webhook.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "webhook.token": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    },
                    "message.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "thread_id": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "id of the thread the message is in",
                        "required": false
                    }
                },
                "parametersArray": false
            },
            "editWebhookMessage": {
                "link": "https://discordapp.com/developers/docs/resources/webhook#edit-webhook-message",
                "resource": "webhook",
                "name": "Edit Webhook Message",
                "method": "PATCH",
                "url": "/webhooks/{webhook.id}/{webhook.token}/messages/{message.id}",
                "description": "message",
                "parameters": {
                    "webhook.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "webhook.token": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    },
                    "message.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "thread_id": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "id of the thread the message is in",
                        "required": false
                    },
                    "content": {
                        "location": "json",
                        "type": "string",
                        "description": "the message contents (up to 2000 characters)"
                    },
                    "embeds": {
                        "location": "json",
                        "type": "array",
                        "description": "embedded rich content"
                    },
                    "allowed_mentions": {
                        "location": "json",
                        "type": "object",
                        "description": "allowed mentions for the message"
                    },
                    "components": {
                        "location": "json",
                        "type": "array",
                        "description": "the components to include with the message"
                    },
                    "files": {
                        "location": "json",
                        "type": "file contents",
                        "description": "the contents of the file being sent/edited"
                    },
                    "payload_json": {
                        "location": "json",
                        "type": "string",
                        "description": "JSON encoded body of non-file params (multipart/form-data only)"
                    },
                    "attachments": {
                        "location": "json",
                        "type": "array",
                        "description": "attached files to keep and possible descriptions for new files"
                    }
                },
                "parametersArray": false
            },
            "deleteWebhookMessage": {
                "link": "https://discordapp.com/developers/docs/resources/webhook#delete-webhook-message",
                "resource": "webhook",
                "name": "Delete Webhook Message",
                "method": "DELETE",
                "url": "/webhooks/{webhook.id}/{webhook.token}/messages/{message.id}",
                "description": "",
                "parameters": {
                    "webhook.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "webhook.token": {
                        "type": "string",
                        "location": "uri",
                        "required": true
                    },
                    "message.id": {
                        "type": "snowflake",
                        "location": "uri",
                        "required": true
                    },
                    "thread_id": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "id of the thread the message is in",
                        "required": false
                    }
                },
                "parametersArray": false
            }
        },
        "gateway": {
            "getGateway": {
                "link": "https://discordapp.com/developers/docs/topics/gateway#get-gateway",
                "resource": "gateway",
                "name": "Get Gateway",
                "method": "GET",
                "url": "/gateway",
                "description": "Connecting",
                "parameters": {},
                "parametersArray": false
            },
            "getGatewayBot": {
                "link": "https://discordapp.com/developers/docs/topics/gateway#get-gateway-bot",
                "resource": "gateway",
                "name": "Get Gateway Bot",
                "method": "GET",
                "url": "/gateway/bot",
                "description": "Get Gateway",
                "parameters": {
                    "total": {
                        "location": "json",
                        "type": "integer",
                        "description": "The total number of session starts the current user is allowed"
                    },
                    "remaining": {
                        "location": "json",
                        "type": "integer",
                        "description": "The remaining number of session starts the current user is allowed"
                    },
                    "reset_after": {
                        "location": "json",
                        "type": "integer",
                        "description": "The number of milliseconds after which the limit resets"
                    },
                    "max_concurrency": {
                        "location": "json",
                        "type": "integer",
                        "description": "The number of identify requests allowed per 5 seconds"
                    }
                },
                "parametersArray": false
            }
        },
        "oauth2": {
            "getCurrentBotApplicationInformation": {
                "link": "https://discordapp.com/developers/docs/topics/oauth2#get-current-bot-application-information",
                "resource": "oauth2",
                "name": "Get Current Bot Application Information",
                "method": "GET",
                "url": "/oauth2/applications/@me",
                "description": "application",
                "parameters": {},
                "parametersArray": false
            },
            "getCurrentAuthorizationInformation": {
                "link": "https://discordapp.com/developers/docs/topics/oauth2#get-current-authorization-information",
                "resource": "oauth2",
                "name": "Get Current Authorization Information",
                "method": "GET",
                "url": "/oauth2/@me",
                "description": "application",
                "parameters": {
                    "application": {
                        "location": "json",
                        "type": "object",
                        "description": "the current application"
                    },
                    "scopes": {
                        "location": "json",
                        "type": "array",
                        "description": "the scopes the user has authorized the application for"
                    },
                    "expires": {
                        "location": "json",
                        "type": "ISO8601 timestamp",
                        "description": "when the access token expires"
                    },
                    "user": {
                        "location": "json",
                        "type": "object",
                        "description": "the user who has authorized, if the user has authorized with the identify scope"
                    }
                },
                "parametersArray": false
            }
        },
        "permissions": {}
    },
    "models": {
        "guild": {
            "guild": {
                "link": "https://discordapp.com/developers/docs/resources/guild#guild-object",
                "resource": "guild",
                "description": "",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "guild id"
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "guild name (2-100 characters, excluding trailing and leading whitespace)"
                    },
                    "icon": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "icon hash"
                    },
                    "icon_hash": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "icon hash, returned when in the template object"
                    },
                    "splash": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "splash hash"
                    },
                    "discovery_splash": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "discovery splash hash; only present for guilds with the \"DISCOVERABLE\" feature"
                    },
                    "owner": {
                        "location": "json",
                        "type": "boolean",
                        "description": "true if the user is the owner of the guild",
                        "default": false
                    },
                    "owner_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id of owner"
                    },
                    "permissions": {
                        "location": "json",
                        "type": "string",
                        "description": "total permissions for the user in the guild (excludes overwrites)"
                    },
                    "region": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "voice region id for the guild (deprecated)"
                    },
                    "afk_channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "id of afk channel"
                    },
                    "afk_timeout": {
                        "location": "json",
                        "type": "integer",
                        "description": "afk timeout in seconds"
                    },
                    "widget_enabled": {
                        "location": "json",
                        "type": "boolean",
                        "description": "true if the server widget is enabled",
                        "default": false
                    },
                    "widget_channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the channel id that the widget will generate an invite to, or null if set to no invite"
                    },
                    "verification_level": {
                        "location": "json",
                        "type": "integer",
                        "description": "verification level required for the guild"
                    },
                    "default_message_notifications": {
                        "location": "json",
                        "type": "integer",
                        "description": "default message notifications level"
                    },
                    "explicit_content_filter": {
                        "location": "json",
                        "type": "integer",
                        "description": "explicit content filter level"
                    },
                    "roles": {
                        "location": "json",
                        "type": "array",
                        "description": "roles in the guild"
                    },
                    "emojis": {
                        "location": "json",
                        "type": "array",
                        "description": "custom guild emojis"
                    },
                    "features": {
                        "location": "json",
                        "type": "array",
                        "description": "enabled guild features"
                    },
                    "mfa_level": {
                        "location": "json",
                        "type": "integer",
                        "description": "required MFA level for the guild"
                    },
                    "application_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "application id of the guild creator if it is bot-created"
                    },
                    "system_channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the id of the channel where guild notices such as welcome messages and boost events are posted"
                    },
                    "system_channel_flags": {
                        "location": "json",
                        "type": "integer",
                        "description": "system channel flags"
                    },
                    "rules_channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the id of the channel where Community guilds can display rules and/or guidelines"
                    },
                    "joined_at": {
                        "location": "json",
                        "type": "ISO8601 timestamp",
                        "description": "when this guild was joined at"
                    },
                    "large": {
                        "location": "json",
                        "type": "boolean",
                        "description": "true if this is considered a large guild",
                        "default": false
                    },
                    "unavailable": {
                        "location": "json",
                        "type": "boolean",
                        "description": "true if this guild is unavailable due to an outage",
                        "default": false
                    },
                    "member_count": {
                        "location": "json",
                        "type": "integer",
                        "description": "total number of members in this guild"
                    },
                    "voice_states": {
                        "location": "json",
                        "type": "array",
                        "description": "states of members currently in voice channels; lacks the guild_id key"
                    },
                    "members": {
                        "location": "json",
                        "type": "array",
                        "description": "users in the guild"
                    },
                    "channels": {
                        "location": "json",
                        "type": "array",
                        "description": "channels in the guild"
                    },
                    "threads": {
                        "location": "json",
                        "type": "array",
                        "description": "all active threads in the guild that current user has permission to view"
                    },
                    "presences": {
                        "location": "json",
                        "type": "array",
                        "description": "presences of the members in the guild, will only include non-offline members if the size is greater than large threshold"
                    },
                    "max_presences": {
                        "location": "json",
                        "type": "integer",
                        "nullable": true,
                        "description": "the maximum number of presences for the guild (null is always returned, apart from the largest of guilds)"
                    },
                    "max_members": {
                        "location": "json",
                        "type": "integer",
                        "description": "the maximum number of members for the guild"
                    },
                    "vanity_url_code": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "the vanity url code for the guild"
                    },
                    "description": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "the description of a Community guild"
                    },
                    "banner": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "banner hash"
                    },
                    "premium_tier": {
                        "location": "json",
                        "type": "integer",
                        "description": "premium tier (Server Boost level)"
                    },
                    "premium_subscription_count": {
                        "location": "json",
                        "type": "integer",
                        "description": "the number of boosts this guild currently has"
                    },
                    "preferred_locale": {
                        "location": "json",
                        "type": "string",
                        "description": "the preferred locale of a Community guild; used in server discovery and notices from Discord; defaults to \"en-US\""
                    },
                    "public_updates_channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the id of the channel where admins and moderators of Community guilds receive notices from Discord"
                    },
                    "max_video_channel_users": {
                        "location": "json",
                        "type": "integer",
                        "description": "the maximum amount of users in a video channel"
                    },
                    "approximate_member_count": {
                        "location": "json",
                        "type": "integer",
                        "description": "approximate number of members in this guild, returned from the GET /guilds/<id> endpoint when with_counts is true"
                    },
                    "approximate_presence_count": {
                        "location": "json",
                        "type": "integer",
                        "description": "approximate number of non-offline members in this guild, returned from the GET /guilds/<id> endpoint when with_counts is true"
                    },
                    "welcome_screen": {
                        "location": "json",
                        "type": "object",
                        "description": "the welcome screen of a Community guild, shown to new members, returned in an Invite's guild object"
                    },
                    "nsfw_level": {
                        "location": "json",
                        "type": "integer",
                        "description": "guild NSFW level"
                    },
                    "stage_instances": {
                        "location": "json",
                        "type": "array",
                        "description": "Stage instances in the guild"
                    },
                    "stickers": {
                        "location": "json",
                        "type": "array",
                        "description": "custom guild stickers"
                    },
                    "guild_scheduled_events": {
                        "location": "json",
                        "type": "array",
                        "description": "the scheduled events in the guild"
                    },
                    "premium_progress_bar_enabled": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the guild has the boost progress bar enabled",
                        "default": false
                    }
                }
            },
            "unavailableGuild": {
                "link": "https://discordapp.com/developers/docs/resources/guild#unavailable-guild-object",
                "resource": "guild",
                "description": "A partial guild object. Represents an Offline Guild, or a Guild whose information has not been provided through Guild Create events during the Gateway connect.",
                "type": "object",
                "properties": {}
            },
            "guildPreview": {
                "link": "https://discordapp.com/developers/docs/resources/guild#guild-preview-object",
                "resource": "guild",
                "description": "",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "guild id"
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "guild name (2-100 characters)"
                    },
                    "icon": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "icon hash"
                    },
                    "splash": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "splash hash"
                    },
                    "discovery_splash": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "discovery splash hash"
                    },
                    "emojis": {
                        "location": "json",
                        "type": "array",
                        "description": "custom guild emojis"
                    },
                    "features": {
                        "location": "json",
                        "type": "array",
                        "description": "enabled guild features"
                    },
                    "approximate_member_count": {
                        "location": "json",
                        "type": "integer",
                        "description": "approximate number of members in this guild"
                    },
                    "approximate_presence_count": {
                        "location": "json",
                        "type": "integer",
                        "description": "approximate number of online members in this guild"
                    },
                    "description": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "the description for the guild, if the guild is discoverable"
                    }
                }
            },
            "guildWidget": {
                "link": "https://discordapp.com/developers/docs/resources/guild#guild-widget-object",
                "resource": "guild",
                "description": "",
                "type": "object",
                "properties": {
                    "enabled": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the widget is enabled",
                        "default": false
                    },
                    "channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the widget channel id"
                    }
                }
            },
            "guildMember": {
                "link": "https://discordapp.com/developers/docs/resources/guild#guild-member-object",
                "resource": "guild",
                "description": "",
                "type": "object",
                "properties": {
                    "user": {
                        "location": "json",
                        "type": "object",
                        "description": "the user this guild member represents"
                    },
                    "nick": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "this users guild nickname"
                    },
                    "avatar": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "the member's guild avatar hash"
                    },
                    "roles": {
                        "location": "json",
                        "type": "array",
                        "description": "array of role object ids"
                    },
                    "joined_at": {
                        "location": "json",
                        "type": "ISO8601 timestamp",
                        "description": "when the user joined the guild"
                    },
                    "premium_since": {
                        "location": "json",
                        "type": "ISO8601 timestamp",
                        "nullable": true,
                        "description": "when the user started boosting the guild"
                    },
                    "deaf": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the user is deafened in voice channels",
                        "default": false
                    },
                    "mute": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the user is muted in voice channels",
                        "default": false
                    },
                    "pending": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the user has not yet passed the guild's Membership Screening requirements",
                        "default": false
                    },
                    "permissions": {
                        "location": "json",
                        "type": "string",
                        "description": "total permissions of the member in the channel, including overwrites, returned when in the interaction object"
                    }
                }
            },
            "integration": {
                "link": "https://discordapp.com/developers/docs/resources/guild#integration-object",
                "resource": "guild",
                "description": "",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "integration id"
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "integration name"
                    },
                    "type": {
                        "location": "json",
                        "type": "string",
                        "description": "integration type (twitch, youtube, or discord)"
                    },
                    "enabled": {
                        "location": "json",
                        "type": "boolean",
                        "description": "is this integration enabled",
                        "default": false
                    },
                    "syncing": {
                        "location": "json",
                        "type": "boolean",
                        "description": "is this integration syncing",
                        "default": false
                    },
                    "role_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id that this integration uses for \"subscribers\""
                    },
                    "enable_emoticons": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether emoticons should be synced for this integration (twitch only currently)",
                        "default": false
                    },
                    "expire_behavior": {
                        "location": "json",
                        "type": "integration expire behavior",
                        "description": "the behavior of expiring subscribers"
                    },
                    "expire_grace_period": {
                        "location": "json",
                        "type": "integer",
                        "description": "the grace period (in days) before expiring subscribers"
                    },
                    "user": {
                        "location": "json",
                        "type": "object",
                        "description": "user for this integration"
                    },
                    "account": {
                        "location": "json",
                        "type": "object",
                        "description": "integration account information"
                    },
                    "synced_at": {
                        "location": "json",
                        "type": "ISO8601 timestamp",
                        "description": "when this integration was last synced"
                    },
                    "subscriber_count": {
                        "location": "json",
                        "type": "integer",
                        "description": "how many subscribers this integration has"
                    },
                    "revoked": {
                        "location": "json",
                        "type": "boolean",
                        "description": "has this integration been revoked",
                        "default": false
                    },
                    "application": {
                        "location": "json",
                        "type": "object",
                        "description": "The bot/OAuth2 application for discord integrations"
                    }
                }
            },
            "integrationAccount": {
                "link": "https://discordapp.com/developers/docs/resources/guild#integration-account-object",
                "resource": "guild",
                "description": "",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "string",
                        "description": "id of the account"
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "name of the account"
                    }
                }
            },
            "integrationApplication": {
                "link": "https://discordapp.com/developers/docs/resources/guild#integration-application-object",
                "resource": "guild",
                "description": "",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the id of the app"
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "the name of the app"
                    },
                    "icon": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "the icon hash of the app"
                    },
                    "description": {
                        "location": "json",
                        "type": "string",
                        "description": "the description of the app"
                    },
                    "summary": {
                        "location": "json",
                        "type": "string",
                        "description": "the summary of the app"
                    },
                    "bot": {
                        "location": "json",
                        "type": "object",
                        "description": "the bot associated with this application"
                    }
                }
            },
            "ban": {
                "link": "https://discordapp.com/developers/docs/resources/guild#ban-object",
                "resource": "guild",
                "description": "",
                "type": "object",
                "properties": {
                    "reason": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "the reason for the ban"
                    },
                    "user": {
                        "location": "json",
                        "type": "object",
                        "description": "the banned user"
                    }
                }
            },
            "welcomeScreen": {
                "link": "https://discordapp.com/developers/docs/resources/guild#welcome-screen-object",
                "resource": "guild",
                "description": "",
                "type": "object",
                "properties": {
                    "description": {
                        "location": "json",
                        "type": "string",
                        "description": "the description shown for the channel"
                    },
                    "welcome_channels": {
                        "location": "json",
                        "type": "array",
                        "description": "the channels shown in the welcome screen, up to 5"
                    },
                    "channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the channel's id"
                    },
                    "emoji_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the emoji id, if the emoji is custom"
                    },
                    "emoji_name": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "the emoji name if custom, the unicode character if standard, or null if no emoji is set"
                    }
                }
            },
            "membershipScreening": {
                "link": "https://discordapp.com/developers/docs/resources/guild#membership-screening-object",
                "resource": "guild",
                "description": "In guilds with Membership Screening enabled, when a member joins, Guild Member Add will be emitted but they will initially be restricted from doing any actions in the guild, and pending will be true in the member object. When the member completes the screening, Guild Member Update will be emitted and pending will be false.",
                "type": "object",
                "properties": {
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "name of the role"
                    },
                    "region": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "guild voice region id (deprecated)"
                    },
                    "icon": {
                        "location": "json",
                        "type": "image data",
                        "description": "the role's icon image (if the guild has the ROLE_ICONS feature)"
                    },
                    "verification_level": {
                        "location": "json",
                        "type": "integer",
                        "nullable": true,
                        "description": "verification level"
                    },
                    "default_message_notifications": {
                        "location": "json",
                        "type": "integer",
                        "nullable": true,
                        "description": "default message notification level"
                    },
                    "explicit_content_filter": {
                        "location": "json",
                        "type": "integer",
                        "nullable": true,
                        "description": "explicit content filter level"
                    },
                    "roles": {
                        "location": "json",
                        "type": "array",
                        "description": "array of role ids the member is assigned",
                        "extra": {
                            "Permission": "MANAGE_ROLES"
                        }
                    },
                    "channels": {
                        "location": "json",
                        "type": "array",
                        "description": "new guild's channels"
                    },
                    "afk_channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "id for afk channel"
                    },
                    "afk_timeout": {
                        "location": "json",
                        "type": "integer",
                        "description": "afk timeout in seconds"
                    },
                    "system_channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the id of the channel where guild notices such as welcome messages and boost events are posted"
                    },
                    "system_channel_flags": {
                        "location": "json",
                        "type": "integer",
                        "description": "system channel flags"
                    },
                    "with_counts": {
                        "location": "query",
                        "type": "boolean",
                        "description": "when true, will return approximate member and presence counts for the guild",
                        "default": false,
                        "required": false
                    },
                    "owner_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "user id to transfer guild ownership to (must be owner)"
                    },
                    "splash": {
                        "location": "json",
                        "type": "image data",
                        "nullable": true,
                        "description": "base64 16:9 png/jpeg image for the guild splash (when the server has the INVITE_SPLASH feature)"
                    },
                    "discovery_splash": {
                        "location": "json",
                        "type": "image data",
                        "nullable": true,
                        "description": "base64 16:9 png/jpeg image for the guild discovery splash (when the server has the DISCOVERABLE feature)"
                    },
                    "banner": {
                        "location": "json",
                        "type": "image data",
                        "nullable": true,
                        "description": "base64 16:9 png/jpeg image for the guild banner (when the server has the BANNER feature)"
                    },
                    "rules_channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the id of the channel where Community guilds display rules and/or guidelines"
                    },
                    "public_updates_channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the id of the channel where admins and moderators of Community guilds receive notices from Discord"
                    },
                    "preferred_locale": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "the preferred locale of a Community guild used in server discovery and notices from Discord; defaults to \"en-US\""
                    },
                    "features": {
                        "location": "json",
                        "type": "array",
                        "description": "enabled guild features"
                    },
                    "description": {
                        "location": "json",
                        "type": "string",
                        "description": "the server description to show in the welcome screen"
                    },
                    "premium_progress_bar_enabled": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the guild's boost progress bar should be enabled.",
                        "default": false
                    },
                    "type": {
                        "location": "json",
                        "type": "integer",
                        "description": "the type of channel"
                    },
                    "topic": {
                        "location": "json",
                        "type": "string",
                        "description": "channel topic (0-1024 characters)"
                    },
                    "bitrate": {
                        "location": "json",
                        "type": "integer",
                        "description": "the bitrate (in bits) of the voice channel (voice only)"
                    },
                    "user_limit": {
                        "location": "json",
                        "type": "integer",
                        "description": "the user limit of the voice channel (voice only)"
                    },
                    "rate_limit_per_user": {
                        "location": "json",
                        "type": "integer",
                        "description": "amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission manage_messages or manage_channel, are unaffected"
                    },
                    "position": {
                        "location": "json",
                        "type": "integer",
                        "nullable": true,
                        "description": "sorting position of the role"
                    },
                    "permission_overwrites": {
                        "location": "json",
                        "type": "array",
                        "description": "the channel's permission overwrites"
                    },
                    "parent_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the new parent ID for the channel that is moved"
                    },
                    "nsfw": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the channel is nsfw",
                        "default": false
                    },
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "role"
                    },
                    "lock_permissions": {
                        "location": "json",
                        "type": "boolean",
                        "nullable": true,
                        "description": "syncs the permission overwrites with the new parent, if moving to a new category",
                        "default": false
                    },
                    "limit": {
                        "location": "query",
                        "type": "integer",
                        "description": "max number of members to return (1-1000)",
                        "default": 1
                    },
                    "after": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "the highest user id in the previous page"
                    },
                    "query": {
                        "location": "query",
                        "type": "string",
                        "description": "Query string to match username(s) and nickname(s) against.",
                        "default": ""
                    },
                    "access_token": {
                        "location": "json",
                        "type": "string",
                        "description": "an oauth2 access token granted with the guilds.join to the bot's application for the user you want to add to the guild",
                        "extra": {
                            "Permission": ""
                        }
                    },
                    "nick": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "value to set users nickname to",
                        "extra": {
                            "Permission": "CHANGE_NICKNAME"
                        }
                    },
                    "mute": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the user is muted in voice channels. Will throw a 400 if the user is not in a voice channel",
                        "default": false,
                        "extra": {
                            "Permission": "MUTE_MEMBERS"
                        }
                    },
                    "deaf": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the user is deafened in voice channels. Will throw a 400 if the user is not in a voice channel",
                        "default": false,
                        "extra": {
                            "Permission": "DEAFEN_MEMBERS"
                        }
                    },
                    "channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the id of the channel the user is currently in"
                    },
                    "delete_message_days": {
                        "location": "json",
                        "type": "integer",
                        "description": "number of days to delete messages for (0-7)"
                    },
                    "reason": {
                        "location": "json",
                        "type": "string",
                        "description": "reason for the prune (deprecated)",
                        "default": ""
                    },
                    "permissions": {
                        "location": "json",
                        "type": "string",
                        "description": "bitwise value of the enabled/disabled permissions"
                    },
                    "color": {
                        "location": "json",
                        "type": "integer",
                        "description": "RGB color value"
                    },
                    "hoist": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the role should be displayed separately in the sidebar",
                        "default": false
                    },
                    "unicode_emoji": {
                        "location": "json",
                        "type": "string",
                        "description": "the role's unicode emoji as a standard emoji (if the guild has the ROLE_ICONS feature)"
                    },
                    "mentionable": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the role should be mentionable",
                        "default": false
                    },
                    "days": {
                        "location": "json",
                        "type": "integer",
                        "description": "number of days to prune (1-30)",
                        "default": 7
                    },
                    "include_roles": {
                        "location": "json",
                        "type": "array",
                        "description": "role(s) to include",
                        "default": "none"
                    },
                    "compute_prune_count": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether 'pruned' is returned, discouraged for large guilds",
                        "default": true
                    },
                    "style": {
                        "location": "query",
                        "type": "string",
                        "description": "style of the widget image returned (see below)",
                        "default": "shield"
                    },
                    "enabled": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the welcome screen is enabled",
                        "default": false
                    },
                    "welcome_channels": {
                        "location": "json",
                        "type": "array",
                        "description": "channels linked in the welcome screen and their display options"
                    },
                    "suppress": {
                        "location": "json",
                        "type": "boolean",
                        "description": "toggles the user's suppress state",
                        "default": false
                    },
                    "request_to_speak_timestamp": {
                        "location": "json",
                        "type": "ISO8601 timestamp",
                        "nullable": true,
                        "description": "sets the user's request to speak"
                    }
                }
            },
            "role": {
                "category": "guild",
                "description": "Roles represent a set of permissions attached to a group of users. Roles have unique names, colors, and can be pinned to the side bar, causing their members to be listed separately. Roles are unique per guild, and can have separate permission profiles for the global context (guild) and channel context.",
                "type": "object",
                "properties": {
                    "id": {
                        "type": "snowflake",
                        "description": "role id"
                    },
                    "name": {
                        "type": "string",
                        "description": "role name"
                    },
                    "color": {
                        "type": "integer",
                        "description": "integer representation of hexadecimal color code"
                    },
                    "hoist": {
                        "type": "bool",
                        "description": "if this role is pinned in the user listing"
                    },
                    "position": {
                        "type": "integer",
                        "description": "position of this role"
                    },
                    "permissions": {
                        "type": "integer",
                        "description": "permission bit set"
                    },
                    "managed": {
                        "type": "bool",
                        "description": "whether this role is managed by an integration"
                    },
                    "mentionable": {
                        "type": "bool",
                        "description": "whether this role is mentionable"
                    }
                }
            }
        },
        "application": {
            "application": {
                "link": "https://discordapp.com/developers/docs/resources/application#application-object",
                "resource": "application",
                "description": "",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the id of the app"
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "the name of the app"
                    },
                    "icon": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "the icon hash of the app"
                    },
                    "description": {
                        "location": "json",
                        "type": "string",
                        "description": "the description of the app"
                    },
                    "rpc_origins": {
                        "location": "json",
                        "type": "array",
                        "description": "an array of rpc origin urls, if rpc is enabled"
                    },
                    "bot_public": {
                        "location": "json",
                        "type": "boolean",
                        "description": "when false only app owner can join the app's bot to guilds",
                        "default": false
                    },
                    "bot_require_code_grant": {
                        "location": "json",
                        "type": "boolean",
                        "description": "when true the app's bot will only join upon completion of the full oauth2 code grant flow",
                        "default": false
                    },
                    "terms_of_service_url": {
                        "location": "json",
                        "type": "string",
                        "description": "the url of the app's terms of service"
                    },
                    "privacy_policy_url": {
                        "location": "json",
                        "type": "string",
                        "description": "the url of the app's privacy policy"
                    },
                    "owner": {
                        "location": "json",
                        "type": "object",
                        "description": "partial user object containing info on the owner of the application"
                    },
                    "summary": {
                        "location": "json",
                        "type": "string",
                        "description": "if this application is a game sold on Discord, this field will be the summary field for the store page of its primary sku"
                    },
                    "verify_key": {
                        "location": "json",
                        "type": "string",
                        "description": "the hex encoded key for verification in interactions and the GameSDK's GetTicket"
                    },
                    "team": {
                        "location": "json",
                        "type": "object",
                        "nullable": true,
                        "description": "if the application belongs to a team, this will be a list of the members of that team"
                    },
                    "guild_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "if this application is a game sold on Discord, this field will be the guild to which it has been linked"
                    },
                    "primary_sku_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "if this application is a game sold on Discord, this field will be the id of the \"Game SKU\" that is created, if exists"
                    },
                    "slug": {
                        "location": "json",
                        "type": "string",
                        "description": "if this application is a game sold on Discord, this field will be the URL slug that links to the store page"
                    },
                    "cover_image": {
                        "location": "json",
                        "type": "string",
                        "description": "the application's default rich presence invite cover image hash"
                    },
                    "flags": {
                        "location": "json",
                        "type": "integer",
                        "description": "the application's public flags"
                    }
                }
            }
        },
        "auditLog": {
            "auditLog": {
                "link": "https://discordapp.com/developers/docs/resources/audit-log#audit-log-object",
                "resource": "audit-log",
                "description": "",
                "type": "object",
                "properties": {
                    "audit_log_entries": {
                        "location": "json",
                        "type": "array",
                        "description": "list of audit log entries"
                    },
                    "guild_scheduled_events": {
                        "location": "json",
                        "type": "array",
                        "description": "list of guild scheduled events found in the audit log"
                    },
                    "integrations": {
                        "location": "json",
                        "type": "array",
                        "description": "list of partial integration objects"
                    },
                    "threads": {
                        "location": "json",
                        "type": "array",
                        "description": "list of threads found in the audit log*"
                    },
                    "users": {
                        "location": "json",
                        "type": "array",
                        "description": "list of users found in the audit log"
                    },
                    "webhooks": {
                        "location": "json",
                        "type": "array",
                        "description": "list of webhooks found in the audit log"
                    }
                }
            },
            "auditLogEntry": {
                "link": "https://discordapp.com/developers/docs/resources/audit-log#audit-log-entry-object",
                "resource": "audit-log",
                "description": "",
                "type": "object",
                "properties": {
                    "target_id": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "id of the affected entity (webhook, user, role, etc.)"
                    },
                    "changes": {
                        "location": "json",
                        "type": "array",
                        "description": "changes made to the target_id"
                    },
                    "user_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the user who made the changes"
                    },
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id of the entry"
                    },
                    "action_type": {
                        "location": "json",
                        "type": "audit log event",
                        "description": "type of action that occurred"
                    },
                    "options": {
                        "location": "json",
                        "type": "optional audit entry info",
                        "description": "additional info for certain action types"
                    },
                    "reason": {
                        "location": "json",
                        "type": "string",
                        "description": "the reason for the change (0-512 characters)"
                    }
                }
            },
            "auditLogChange": {
                "link": "https://discordapp.com/developers/docs/resources/audit-log#audit-log-change-object",
                "resource": "audit-log",
                "description": "",
                "type": "object",
                "properties": {
                    "user_id": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "filter the log for actions made by a user"
                    },
                    "action_type": {
                        "location": "query",
                        "type": "integer",
                        "description": "the type of audit log event"
                    },
                    "before": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "filter the log before a certain entry id"
                    },
                    "limit": {
                        "location": "query",
                        "type": "integer",
                        "description": "how many entries are returned (default 50, minimum 1, maximum 100)"
                    }
                }
            }
        },
        "channel": {
            "channel": {
                "link": "https://discordapp.com/developers/docs/resources/channel#channel-object",
                "resource": "channel",
                "description": "Represents a guild or DM channel within Discord.",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the id of this channel"
                    },
                    "type": {
                        "location": "json",
                        "type": "integer",
                        "description": "the type of channel"
                    },
                    "guild_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the id of the guild (may be missing for some channel objects received over gateway guild dispatches)"
                    },
                    "position": {
                        "location": "json",
                        "type": "integer",
                        "description": "sorting position of the channel"
                    },
                    "permission_overwrites": {
                        "location": "json",
                        "type": "array",
                        "description": "explicit permission overwrites for members and roles"
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "the name of the channel (1-100 characters)"
                    },
                    "topic": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "the channel topic (0-1024 characters)"
                    },
                    "nsfw": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the channel is nsfw",
                        "default": false
                    },
                    "last_message_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the id of the last message sent in this channel (may not point to an existing or valid message)"
                    },
                    "bitrate": {
                        "location": "json",
                        "type": "integer",
                        "description": "the bitrate (in bits) of the voice channel"
                    },
                    "user_limit": {
                        "location": "json",
                        "type": "integer",
                        "description": "the user limit of the voice channel"
                    },
                    "rate_limit_per_user": {
                        "location": "json",
                        "type": "integer",
                        "description": "amount of seconds a user has to wait before sending another message (0-21600); bots, as well as users with the permission manage_messages or manage_channel, are unaffected"
                    },
                    "recipients": {
                        "location": "json",
                        "type": "array",
                        "description": "the recipients of the DM"
                    },
                    "icon": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "icon hash"
                    },
                    "owner_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id of the creator of the group DM or thread"
                    },
                    "application_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "application id of the group DM creator if it is bot-created"
                    },
                    "parent_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "for guild channels: id of the parent category for a channel (each parent category can contain up to 50 channels), for threads: id of the text channel this thread was created"
                    },
                    "last_pin_timestamp": {
                        "location": "json",
                        "type": "ISO8601 timestamp",
                        "nullable": true,
                        "description": "when the last pinned message was pinned. This may be null in events such as GUILD_CREATE when a message is not pinned."
                    },
                    "rtc_region": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "voice region id for the voice channel, automatic when set to null"
                    },
                    "video_quality_mode": {
                        "location": "json",
                        "type": "integer",
                        "description": "the camera video quality mode of the voice channel, 1 when not present"
                    },
                    "message_count": {
                        "location": "json",
                        "type": "integer",
                        "description": "an approximate count of messages in a thread, stops counting at 50"
                    },
                    "member_count": {
                        "location": "json",
                        "type": "integer",
                        "description": "an approximate count of users in a thread, stops counting at 50"
                    },
                    "thread_metadata": {
                        "location": "json",
                        "type": "object",
                        "description": "thread-specific fields not needed by other channels"
                    },
                    "member": {
                        "location": "json",
                        "type": "object",
                        "description": "thread member object for the current user, if they have joined the thread, only included on certain API endpoints"
                    },
                    "default_auto_archive_duration": {
                        "location": "json",
                        "type": "integer",
                        "description": "default duration that the clients (not the API) will use for newly created threads, in minutes, to automatically archive the thread after recent activity, can be set to: 60, 1440, 4320, 10080"
                    },
                    "permissions": {
                        "location": "json",
                        "type": "string",
                        "description": "computed permissions for the invoking user in the channel, including overwrites, only included when part of the resolved data received on a slash command interaction"
                    }
                }
            },
            "message": {
                "link": "https://discordapp.com/developers/docs/resources/channel#message-object",
                "resource": "channel",
                "description": "Represents a message sent in a channel within Discord.",
                "type": "object",
                "properties": {
                    "type": {
                        "location": "json",
                        "type": "integer",
                        "description": "type of message activity"
                    },
                    "party_id": {
                        "location": "json",
                        "type": "string",
                        "description": "party_id from a Rich Presence event"
                    }
                }
            },
            "messageReference": {
                "link": "https://discordapp.com/developers/docs/resources/channel#message-reference-object",
                "resource": "channel",
                "description": "",
                "type": "object",
                "properties": {
                    "message_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id of the originating message"
                    },
                    "channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id of the originating message's channel"
                    },
                    "guild_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id of the originating message's guild"
                    },
                    "fail_if_not_exists": {
                        "location": "json",
                        "type": "boolean",
                        "description": "when sending, whether to error if the referenced message doesn't exist instead of sending as a normal (non-reply) message, default true",
                        "default": false
                    }
                }
            },
            "followedChannel": {
                "link": "https://discordapp.com/developers/docs/resources/channel#followed-channel-object",
                "resource": "channel",
                "description": "",
                "type": "object",
                "properties": {
                    "channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "source channel id"
                    },
                    "webhook_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "created target webhook id"
                    }
                }
            },
            "reaction": {
                "link": "https://discordapp.com/developers/docs/resources/channel#reaction-object",
                "resource": "channel",
                "description": "",
                "type": "object",
                "properties": {
                    "count": {
                        "location": "json",
                        "type": "integer",
                        "description": "times this emoji has been used to react"
                    },
                    "me": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the current user reacted using this emoji",
                        "default": false
                    },
                    "emoji": {
                        "location": "json",
                        "type": "object",
                        "description": "emoji information"
                    }
                }
            },
            "overwrite": {
                "link": "https://discordapp.com/developers/docs/resources/channel#overwrite-object",
                "resource": "channel",
                "description": "See permissions for more information about the allow and deny fields.",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "role or user id"
                    },
                    "type": {
                        "location": "json",
                        "type": "int",
                        "description": "either 0 (role) or 1 (member)"
                    },
                    "allow": {
                        "location": "json",
                        "type": "string",
                        "description": "permission bit set"
                    },
                    "deny": {
                        "location": "json",
                        "type": "string",
                        "description": "permission bit set"
                    }
                }
            },
            "threadMetadata": {
                "link": "https://discordapp.com/developers/docs/resources/channel#thread-metadata-object",
                "resource": "channel",
                "description": "The thread metadata object contains a number of thread-specific channel fields that are not needed by other channel types.",
                "type": "object",
                "properties": {
                    "archived": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the thread is archived",
                        "default": false
                    },
                    "auto_archive_duration": {
                        "location": "json",
                        "type": "integer",
                        "description": "duration in minutes to automatically archive the thread after recent activity, can be set to: 60, 1440, 4320, 10080"
                    },
                    "archive_timestamp": {
                        "location": "json",
                        "type": "ISO8601 timestamp",
                        "description": "timestamp when the thread's archive status was last changed, used for calculating recent activity"
                    },
                    "locked": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the thread is locked; when a thread is locked, only users with MANAGE_THREADS can unarchive it",
                        "default": false
                    },
                    "invitable": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether non-moderators can add other non-moderators to a thread; only available on private threads",
                        "default": false
                    }
                }
            },
            "threadMember": {
                "link": "https://discordapp.com/developers/docs/resources/channel#thread-member-object",
                "resource": "channel",
                "description": "A thread member is used to indicate whether a user has joined a thread or not.",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the id of the thread"
                    },
                    "user_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the id of the user"
                    },
                    "join_timestamp": {
                        "location": "json",
                        "type": "ISO8601 timestamp",
                        "description": "the time the current user last joined the thread"
                    },
                    "flags": {
                        "location": "json",
                        "type": "integer",
                        "description": "any user-thread settings, currently only used for notifications"
                    }
                }
            },
            "embed": {
                "link": "https://discordapp.com/developers/docs/resources/channel#embed-object",
                "resource": "channel",
                "description": "",
                "type": "object",
                "properties": {
                    "title": {
                        "location": "json",
                        "type": "string",
                        "description": "title of embed"
                    },
                    "type": {
                        "location": "json",
                        "type": "string",
                        "description": "type of embed (always \"rich\" for webhook embeds)"
                    },
                    "description": {
                        "location": "json",
                        "type": "string",
                        "description": "description of embed"
                    },
                    "url": {
                        "location": "json",
                        "type": "string",
                        "description": "url of author"
                    },
                    "timestamp": {
                        "location": "json",
                        "type": "ISO8601 timestamp",
                        "description": "timestamp of embed content"
                    },
                    "color": {
                        "location": "json",
                        "type": "integer",
                        "description": "color code of the embed"
                    },
                    "footer": {
                        "location": "json",
                        "type": "object",
                        "description": "footer information"
                    },
                    "image": {
                        "location": "json",
                        "type": "object",
                        "description": "image information"
                    },
                    "thumbnail": {
                        "location": "json",
                        "type": "object",
                        "description": "thumbnail information"
                    },
                    "video": {
                        "location": "json",
                        "type": "object",
                        "description": "video information"
                    },
                    "provider": {
                        "location": "json",
                        "type": "object",
                        "description": "provider information"
                    },
                    "author": {
                        "location": "json",
                        "type": "object",
                        "description": "author information"
                    },
                    "fields": {
                        "location": "json",
                        "type": "array",
                        "description": "fields information"
                    },
                    "proxy_url": {
                        "location": "json",
                        "type": "string",
                        "description": "a proxied url of the image"
                    },
                    "height": {
                        "location": "json",
                        "type": "integer",
                        "description": "height of image"
                    },
                    "width": {
                        "location": "json",
                        "type": "integer",
                        "description": "width of image"
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "name of the field"
                    },
                    "icon_url": {
                        "location": "json",
                        "type": "string",
                        "description": "url of footer icon (only supports http(s) and attachments)"
                    },
                    "proxy_icon_url": {
                        "location": "json",
                        "type": "string",
                        "description": "a proxied url of footer icon"
                    },
                    "text": {
                        "location": "json",
                        "type": "string",
                        "description": "footer text"
                    },
                    "value": {
                        "location": "json",
                        "type": "string",
                        "description": "value of the field"
                    },
                    "inline": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether or not this field should display inline",
                        "default": false
                    }
                }
            },
            "attachment": {
                "link": "https://discordapp.com/developers/docs/resources/channel#attachment-object",
                "resource": "channel",
                "description": "",
                "type": "object",
                "properties": {}
            },
            "channelMention": {
                "link": "https://discordapp.com/developers/docs/resources/channel#channel-mention-object",
                "resource": "channel",
                "description": "",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id of the channel"
                    },
                    "guild_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id of the guild containing the channel"
                    },
                    "type": {
                        "location": "json",
                        "type": "integer",
                        "description": "the type of channel"
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "the name of the channel"
                    }
                }
            },
            "allowedMentions": {
                "link": "https://discordapp.com/developers/docs/resources/channel#allowed-mentions-object",
                "resource": "channel",
                "description": "The allowed mention field allows for more granular control over mentions without various hacks to the message content. This will always validate against message content to avoid phantom pings (e.g. to ping everyone, you must still have @everyone in the message content), and check against user/bot permissions.",
                "type": "object",
                "properties": {
                    "parse": {
                        "location": "json",
                        "type": "array",
                        "description": "An array of allowed mention types to parse from the content."
                    },
                    "roles": {
                        "location": "json",
                        "type": "list of snowflakes",
                        "description": "Array of role_ids to mention (Max size of 100)"
                    },
                    "users": {
                        "location": "json",
                        "type": "list of snowflakes",
                        "description": "Array of user_ids to mention (Max size of 100)"
                    },
                    "replied_user": {
                        "location": "json",
                        "type": "boolean",
                        "description": "For replies, whether to mention the author of the message being replied to (default false)",
                        "default": false
                    }
                }
            }
        },
        "emoji": {
            "emoji": {
                "link": "https://discordapp.com/developers/docs/resources/emoji#emoji-object",
                "resource": "emoji",
                "description": "",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "emoji id"
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "name of the emoji"
                    },
                    "roles": {
                        "location": "json",
                        "type": "array",
                        "nullable": true,
                        "description": "roles allowed to use this emoji"
                    },
                    "user": {
                        "location": "json",
                        "type": "object",
                        "description": "user that created this emoji"
                    },
                    "require_colons": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this emoji must be wrapped in colons",
                        "default": false
                    },
                    "managed": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this emoji is managed",
                        "default": false
                    },
                    "animated": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this emoji is animated",
                        "default": false
                    },
                    "available": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this emoji can be used, may be false due to loss of Server Boosts",
                        "default": false
                    },
                    "image": {
                        "location": "json",
                        "type": "image data",
                        "description": "the 128x128 emoji image"
                    }
                }
            }
        },
        "guildScheduledEvent": {
            "guildScheduledEvent": {
                "link": "https://discordapp.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object",
                "resource": "guild-scheduled-event",
                "description": "",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the id of the scheduled event"
                    },
                    "guild_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the guild id which the scheduled event belongs to"
                    },
                    "channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the channel id in which the scheduled event will be hosted, or null if scheduled entity type is EXTERNAL"
                    },
                    "creator_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the id of the user that created the scheduled event *"
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "the name of the scheduled event (1-100 characters)"
                    },
                    "description": {
                        "location": "json",
                        "type": "string",
                        "description": "the description of the scheduled event (1-1000 characters)"
                    },
                    "scheduled_start_time": {
                        "location": "json",
                        "type": "string",
                        "description": "the time the scheduled event will start"
                    },
                    "scheduled_end_time": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "the time the scheduled event will end, required if entity_type is EXTERNAL"
                    },
                    "privacy_level": {
                        "location": "json",
                        "type": "integer",
                        "description": "the privacy level of the scheduled event"
                    },
                    "status": {
                        "location": "json",
                        "type": "integer",
                        "description": "the status of the scheduled event"
                    },
                    "entity_type": {
                        "location": "json",
                        "type": "scheduled entity type",
                        "description": "the type of the scheduled event"
                    },
                    "entity_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the id of an entity associated with a guild scheduled event"
                    },
                    "entity_metadata": {
                        "location": "json",
                        "type": "array",
                        "nullable": true,
                        "description": "additional metadata for the guild scheduled event"
                    },
                    "creator": {
                        "location": "json",
                        "type": "object",
                        "description": "the user that created the scheduled event"
                    },
                    "user_count": {
                        "location": "json",
                        "type": "integer",
                        "description": "the number of users subscribed to the scheduled event"
                    }
                }
            },
            "guildScheduledEventUser": {
                "link": "https://discordapp.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-user-object",
                "resource": "guild-scheduled-event",
                "description": "",
                "type": "object",
                "properties": {
                    "guild_scheduled_event_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the scheduled event id which the user subscribed to"
                    },
                    "user": {
                        "location": "json",
                        "type": "user",
                        "description": "user which subscribed to an event"
                    },
                    "member": {
                        "location": "json",
                        "type": "guild member",
                        "description": "guild member data for this user for the guild which this event belongs to, if any"
                    },
                    "with_user_count": {
                        "location": "query",
                        "type": "boolean",
                        "description": "include number of users subscribed to each event",
                        "default": false
                    },
                    "channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the channel id of the scheduled event, set to null if changing entity type to EXTERNAL"
                    },
                    "entity_metadata": {
                        "location": "json",
                        "type": "array",
                        "description": "the entity metadata of the scheduled event"
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "the name of the scheduled event"
                    },
                    "privacy_level": {
                        "location": "json",
                        "type": "integer",
                        "description": "the privacy level of the scheduled event"
                    },
                    "scheduled_start_time": {
                        "location": "json",
                        "type": "string",
                        "description": "the time to schedule the scheduled event"
                    },
                    "scheduled_end_time": {
                        "location": "json",
                        "type": "string",
                        "description": "the time when the scheduled event is scheduled to end"
                    },
                    "description": {
                        "location": "json",
                        "type": "string",
                        "description": "the description of the scheduled event"
                    },
                    "entity_type": {
                        "location": "json",
                        "type": "integer",
                        "description": "the entity type of the scheduled event"
                    },
                    "status": {
                        "location": "json",
                        "type": "integer",
                        "description": "the status of the scheduled event"
                    },
                    "limit": {
                        "location": "query",
                        "type": "number",
                        "description": "how many users to receive from the event",
                        "default": "100"
                    },
                    "with_member": {
                        "location": "query",
                        "type": "boolean",
                        "description": "include guild member data if it exists",
                        "default": false
                    },
                    "before": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "consider only users before given user id"
                    },
                    "after": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "consider only users after given user id"
                    }
                }
            }
        },
        "guildTemplate": {
            "guildTemplate": {
                "link": "https://discordapp.com/developers/docs/resources/guild-template#guild-template-object",
                "resource": "guild-template",
                "description": "Represents a code that when used, creates a guild based on a snapshot of an existing guild.",
                "type": "object",
                "properties": {
                    "code": {
                        "location": "json",
                        "type": "string",
                        "description": "the template code (unique ID)"
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "name of the template (1-100 characters)"
                    },
                    "description": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "description for the template (0-120 characters)"
                    },
                    "usage_count": {
                        "location": "json",
                        "type": "integer",
                        "description": "number of times this template has been used"
                    },
                    "creator_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the ID of the user who created the template"
                    },
                    "creator": {
                        "location": "json",
                        "type": "object",
                        "description": "the user who created the template"
                    },
                    "created_at": {
                        "location": "json",
                        "type": "ISO8601 timestamp",
                        "description": "when this template was created"
                    },
                    "updated_at": {
                        "location": "json",
                        "type": "ISO8601 timestamp",
                        "description": "when this template was last synced to the source guild"
                    },
                    "source_guild_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the ID of the guild this template is based on"
                    },
                    "serialized_source_guild": {
                        "location": "json",
                        "type": "object",
                        "description": "the guild snapshot this template contains"
                    },
                    "is_dirty": {
                        "location": "json",
                        "type": "boolean",
                        "nullable": true,
                        "description": "whether the template has unsynced changes",
                        "default": false
                    },
                    "icon": {
                        "location": "json",
                        "type": "image data",
                        "description": "base64 128x128 image for the guild icon"
                    }
                }
            }
        },
        "invite": {
            "invite": {
                "link": "https://discordapp.com/developers/docs/resources/invite#invite-object",
                "resource": "invite",
                "description": "Represents a code that when used, adds a user to a guild or group DM channel.",
                "type": "object",
                "properties": {
                    "code": {
                        "location": "json",
                        "type": "string",
                        "description": "the invite code (unique ID)"
                    },
                    "guild": {
                        "location": "json",
                        "type": "object",
                        "description": "the guild this invite is for"
                    },
                    "channel": {
                        "location": "json",
                        "type": "object",
                        "description": "the channel this invite is for"
                    },
                    "inviter": {
                        "location": "json",
                        "type": "object",
                        "description": "the user who created the invite"
                    },
                    "target_type": {
                        "location": "json",
                        "type": "integer",
                        "description": "the type of target for this voice channel invite"
                    },
                    "target_user": {
                        "location": "json",
                        "type": "object",
                        "description": "the user whose stream to display for this voice channel stream invite"
                    },
                    "target_application": {
                        "location": "json",
                        "type": "object",
                        "description": "the embedded application to open for this voice channel embedded application invite"
                    },
                    "approximate_presence_count": {
                        "location": "json",
                        "type": "integer",
                        "description": "approximate count of online members, returned from the GET /invites/<code> endpoint when with_counts is true"
                    },
                    "approximate_member_count": {
                        "location": "json",
                        "type": "integer",
                        "description": "approximate count of total members, returned from the GET /invites/<code> endpoint when with_counts is true"
                    },
                    "expires_at": {
                        "location": "json",
                        "type": "ISO8601 timestamp",
                        "nullable": true,
                        "description": "the expiration date of this invite, returned from the GET /invites/<code> endpoint when with_expiration is true"
                    },
                    "stage_instance": {
                        "location": "json",
                        "type": "object",
                        "description": "stage instance data if there is a public Stage instance in the Stage channel this invite is for"
                    },
                    "guild_scheduled_event": {
                        "location": "json",
                        "type": "object",
                        "description": "guild scheduled event data, only included if guild_scheduled_event_id contains a valid guild scheduled event id"
                    }
                }
            },
            "inviteMetadata": {
                "link": "https://discordapp.com/developers/docs/resources/invite#invite-metadata-object",
                "resource": "invite",
                "description": "Extra information about an invite, will extend the invite object.",
                "type": "object",
                "properties": {
                    "uses": {
                        "location": "json",
                        "type": "integer",
                        "description": "number of times this invite has been used"
                    },
                    "max_uses": {
                        "location": "json",
                        "type": "integer",
                        "description": "max number of times this invite can be used"
                    },
                    "max_age": {
                        "location": "json",
                        "type": "integer",
                        "description": "duration (in seconds) after which the invite expires"
                    },
                    "temporary": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this invite only grants temporary membership",
                        "default": false
                    },
                    "created_at": {
                        "location": "json",
                        "type": "ISO8601 timestamp",
                        "description": "when this invite was created"
                    }
                }
            },
            "inviteStageInstance": {
                "link": "https://discordapp.com/developers/docs/resources/invite#invite-stage-instance-object",
                "resource": "invite",
                "description": "",
                "type": "object",
                "properties": {
                    "members": {
                        "location": "json",
                        "type": "array",
                        "description": "the members speaking in the Stage"
                    },
                    "participant_count": {
                        "location": "json",
                        "type": "integer",
                        "description": "the number of users in the Stage"
                    },
                    "speaker_count": {
                        "location": "json",
                        "type": "integer",
                        "description": "the number of users speaking in the Stage"
                    },
                    "topic": {
                        "location": "json",
                        "type": "string",
                        "description": "the topic of the Stage instance (1-120 characters)"
                    },
                    "with_counts": {
                        "location": "query",
                        "type": "boolean",
                        "description": "whether the invite should contain approximate member counts",
                        "default": false
                    },
                    "with_expiration": {
                        "location": "query",
                        "type": "boolean",
                        "description": "whether the invite should contain the expiration date",
                        "default": false
                    },
                    "guild_scheduled_event_id": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "the guild scheduled event to include with the invite"
                    }
                }
            }
        },
        "stageInstance": {
            "stageInstance": {
                "link": "https://discordapp.com/developers/docs/resources/stage-instance#stage-instance-object",
                "resource": "stage-instance",
                "description": "",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "The id of this Stage instance"
                    },
                    "guild_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "The guild id of the associated Stage channel"
                    },
                    "channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "The id of the associated Stage channel"
                    },
                    "topic": {
                        "location": "json",
                        "type": "string",
                        "description": "The topic of the Stage instance (1-120 characters)"
                    },
                    "privacy_level": {
                        "location": "json",
                        "type": "integer",
                        "description": "The privacy level of the Stage instance"
                    },
                    "discoverable_disabled": {
                        "location": "json",
                        "type": "boolean",
                        "description": "Whether or not Stage Discovery is disabled",
                        "default": false
                    }
                }
            }
        },
        "sticker": {
            "sticker": {
                "link": "https://discordapp.com/developers/docs/resources/sticker#sticker-object",
                "resource": "sticker",
                "description": "Represents a sticker that can be sent in messages.",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id of the sticker"
                    },
                    "pack_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "for standard stickers, id of the pack the sticker is from"
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "name of the sticker"
                    },
                    "description": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "description of the sticker"
                    },
                    "tags": {
                        "location": "json",
                        "type": "string",
                        "description": "autocomplete/suggestion tags for the sticker (max 200 characters)"
                    },
                    "asset": {
                        "location": "json",
                        "type": "string",
                        "description": "Deprecated previously the sticker asset hash, now an empty string"
                    },
                    "type": {
                        "location": "json",
                        "type": "integer",
                        "description": "type of sticker"
                    },
                    "format_type": {
                        "location": "json",
                        "type": "integer",
                        "description": "type of sticker format"
                    },
                    "available": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this guild sticker can be used, may be false due to loss of Server Boosts",
                        "default": false
                    },
                    "guild_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id of the guild that owns this sticker"
                    },
                    "user": {
                        "location": "json",
                        "type": "object",
                        "description": "the user that uploaded the guild sticker"
                    },
                    "sort_value": {
                        "location": "json",
                        "type": "integer",
                        "description": "the standard sticker's sort order within its pack"
                    }
                }
            },
            "stickerItem": {
                "link": "https://discordapp.com/developers/docs/resources/sticker#sticker-item-object",
                "resource": "sticker",
                "description": "The smallest amount of data required to render a sticker. A partial sticker object.",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id of the sticker"
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "name of the sticker"
                    },
                    "format_type": {
                        "location": "json",
                        "type": "integer",
                        "description": "type of sticker format"
                    }
                }
            },
            "stickerPack": {
                "link": "https://discordapp.com/developers/docs/resources/sticker#sticker-pack-object",
                "resource": "sticker",
                "description": "Represents a pack of standard stickers.",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id of the sticker pack"
                    },
                    "stickers": {
                        "location": "json",
                        "type": "array",
                        "description": "the stickers in the pack"
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "name of the sticker (2-30 characters)"
                    },
                    "sku_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id of the pack's SKU"
                    },
                    "cover_sticker_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id of a sticker in the pack which is shown as the pack's icon"
                    },
                    "description": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "description of the sticker (2-100 characters)"
                    },
                    "banner_asset_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "id of the sticker pack's banner image"
                    },
                    "sticker_packs": {
                        "location": "json",
                        "type": "array"
                    },
                    "tags": {
                        "location": "json",
                        "type": "string",
                        "description": "autocomplete/suggestion tags for the sticker (max 200 characters)"
                    },
                    "file": {
                        "location": "json",
                        "type": "file contents",
                        "description": "the sticker file to upload, must be a PNG, APNG, or Lottie JSON file, max 500 KB"
                    }
                }
            }
        },
        "user": {
            "user": {
                "link": "https://discordapp.com/developers/docs/resources/user#user-object",
                "resource": "user",
                "description": "",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the user's id",
                        "extra": {
                            "Required OAuth2 Scope": "identify"
                        }
                    },
                    "username": {
                        "location": "json",
                        "type": "string",
                        "description": "the user's username, not unique across the platform",
                        "extra": {
                            "Required OAuth2 Scope": "identify"
                        }
                    },
                    "discriminator": {
                        "location": "json",
                        "type": "string",
                        "description": "the user's 4-digit discord-tag",
                        "extra": {
                            "Required OAuth2 Scope": "identify"
                        }
                    },
                    "avatar": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "the user's avatar hash",
                        "extra": {
                            "Required OAuth2 Scope": "identify"
                        }
                    },
                    "bot": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the user belongs to an OAuth2 application",
                        "default": false,
                        "extra": {
                            "Required OAuth2 Scope": "identify"
                        }
                    },
                    "system": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the user is an Official Discord System user (part of the urgent message system)",
                        "default": false,
                        "extra": {
                            "Required OAuth2 Scope": "identify"
                        }
                    },
                    "mfa_enabled": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the user has two factor enabled on their account",
                        "default": false,
                        "extra": {
                            "Required OAuth2 Scope": "identify"
                        }
                    },
                    "banner": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "the user's banner hash",
                        "extra": {
                            "Required OAuth2 Scope": "identify"
                        }
                    },
                    "accent_color": {
                        "location": "json",
                        "type": "integer",
                        "nullable": true,
                        "description": "the user's banner color encoded as an integer representation of hexadecimal color code",
                        "extra": {
                            "Required OAuth2 Scope": "identify"
                        }
                    },
                    "locale": {
                        "location": "json",
                        "type": "string",
                        "description": "the user's chosen language option",
                        "extra": {
                            "Required OAuth2 Scope": "identify"
                        }
                    },
                    "verified": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the email on this account has been verified",
                        "default": false,
                        "extra": {
                            "Required OAuth2 Scope": "email"
                        }
                    },
                    "email": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "the user's email",
                        "extra": {
                            "Required OAuth2 Scope": "email"
                        }
                    },
                    "flags": {
                        "location": "json",
                        "type": "integer",
                        "description": "the flags on a user's account",
                        "extra": {
                            "Required OAuth2 Scope": "identify"
                        }
                    },
                    "premium_type": {
                        "location": "json",
                        "type": "integer",
                        "description": "the type of Nitro subscription on a user's account",
                        "extra": {
                            "Required OAuth2 Scope": "identify"
                        }
                    },
                    "public_flags": {
                        "location": "json",
                        "type": "integer",
                        "description": "the public flags on a user's account",
                        "extra": {
                            "Required OAuth2 Scope": "identify"
                        }
                    }
                }
            },
            "connection": {
                "link": "https://discordapp.com/developers/docs/resources/user#connection-object",
                "resource": "user",
                "description": "The connection object that the user has attached.",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "string",
                        "description": "id of the connection account"
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "the username of the connection account"
                    },
                    "type": {
                        "location": "json",
                        "type": "string",
                        "description": "the service of the connection (twitch, youtube)"
                    },
                    "revoked": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the connection is revoked",
                        "default": false
                    },
                    "integrations": {
                        "location": "json",
                        "type": "array",
                        "description": "an array of partial server integrations"
                    },
                    "verified": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether the connection is verified",
                        "default": false
                    },
                    "friend_sync": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether friend sync is enabled for this connection",
                        "default": false
                    },
                    "show_activity": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether activities related to this connection will be shown in presence updates",
                        "default": false
                    },
                    "visibility": {
                        "location": "json",
                        "type": "integer",
                        "description": "visibility of this connection"
                    },
                    "username": {
                        "location": "json",
                        "type": "string",
                        "description": "user's username, if changed may cause the user's discriminator to be randomized."
                    },
                    "avatar": {
                        "location": "json",
                        "type": "image data",
                        "nullable": true,
                        "description": "if passed, modifies the user's avatar"
                    },
                    "before": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "get guilds before this guild ID",
                        "required": false
                    },
                    "after": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "get guilds after this guild ID",
                        "required": false
                    },
                    "limit": {
                        "location": "query",
                        "type": "integer",
                        "description": "max number of guilds to return (1-200)",
                        "default": 200,
                        "required": false
                    },
                    "recipient_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the recipient to open a DM channel with"
                    },
                    "access_tokens": {
                        "location": "json",
                        "type": "array",
                        "description": "access tokens of users that have granted your app the gdm.join scope"
                    },
                    "nicks": {
                        "location": "json",
                        "type": "dict",
                        "description": "a dictionary of user ids to their respective nicknames"
                    }
                }
            }
        },
        "voice": {
            "voiceState": {
                "link": "https://discordapp.com/developers/docs/resources/voice#voice-state-object",
                "resource": "voice",
                "description": "Used to represent a user's voice connection status.",
                "type": "object",
                "properties": {
                    "guild_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the guild id this voice state is for"
                    },
                    "channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the channel id this user is connected to"
                    },
                    "user_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the user id this voice state is for"
                    },
                    "member": {
                        "location": "json",
                        "type": "object",
                        "description": "the guild member this voice state is for"
                    },
                    "session_id": {
                        "location": "json",
                        "type": "string",
                        "description": "the session id for this voice state"
                    },
                    "deaf": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this user is deafened by the server",
                        "default": false
                    },
                    "mute": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this user is muted by the server",
                        "default": false
                    },
                    "self_deaf": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this user is locally deafened",
                        "default": false
                    },
                    "self_mute": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this user is locally muted",
                        "default": false
                    },
                    "self_stream": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this user is streaming using \"Go Live\"",
                        "default": false
                    },
                    "self_video": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this user's camera is enabled",
                        "default": false
                    },
                    "suppress": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this user is muted by the current user",
                        "default": false
                    },
                    "request_to_speak_timestamp": {
                        "location": "json",
                        "type": "ISO8601 timestamp",
                        "nullable": true,
                        "description": "the time at which the user requested to speak"
                    }
                }
            },
            "voiceRegion": {
                "link": "https://discordapp.com/developers/docs/resources/voice#voice-region-object",
                "resource": "voice",
                "description": "",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "string",
                        "description": "unique ID for the region"
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "name of the region"
                    },
                    "optimal": {
                        "location": "json",
                        "type": "boolean",
                        "description": "true for a single server that is closest to the current user's client",
                        "default": false
                    },
                    "deprecated": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this is a deprecated voice region (avoid switching to these)",
                        "default": false
                    },
                    "custom": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this is a custom voice region (used for events/etc)",
                        "default": false
                    }
                }
            }
        },
        "webhook": {
            "webhook": {
                "link": "https://discordapp.com/developers/docs/resources/webhook#webhook-object",
                "resource": "webhook",
                "description": "Used to represent a webhook.",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the id of the webhook"
                    },
                    "type": {
                        "location": "json",
                        "type": "integer",
                        "description": "the type of the webhook"
                    },
                    "guild_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the guild id this webhook is for, if any"
                    },
                    "channel_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the new channel id this webhook should be moved to"
                    },
                    "user": {
                        "location": "json",
                        "type": "object",
                        "description": "the user this webhook was created by (not returned when getting a webhook with its token)"
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "the default name of the webhook"
                    },
                    "avatar": {
                        "location": "json",
                        "type": "image data",
                        "nullable": true,
                        "description": "image for the default webhook avatar"
                    },
                    "token": {
                        "location": "json",
                        "type": "string",
                        "description": "the secure token of the webhook (returned for Incoming Webhooks)"
                    },
                    "application_id": {
                        "location": "json",
                        "type": "snowflake",
                        "nullable": true,
                        "description": "the bot/OAuth2 application that created this webhook"
                    },
                    "source_guild": {
                        "location": "json",
                        "type": "object",
                        "description": "the guild of the channel that this webhook is following (returned for Channel Follower Webhooks)"
                    },
                    "source_channel": {
                        "location": "json",
                        "type": "object",
                        "description": "the channel that this webhook is following (returned for Channel Follower Webhooks)"
                    },
                    "url": {
                        "location": "json",
                        "type": "string",
                        "description": "the url used for executing the webhook (returned by the webhooks OAuth2 flow)"
                    },
                    "wait": {
                        "location": "query",
                        "type": "boolean",
                        "description": "waits for server confirmation of message send before response (defaults to true; when false a message that is not saved does not return an error)",
                        "default": false,
                        "required": false
                    },
                    "thread_id": {
                        "location": "query",
                        "type": "snowflake",
                        "description": "id of the thread the message is in",
                        "required": false
                    },
                    "content": {
                        "location": "json",
                        "type": "string",
                        "description": "the message contents (up to 2000 characters)"
                    },
                    "username": {
                        "location": "json",
                        "type": "string",
                        "description": "override the default username of the webhook",
                        "required": false
                    },
                    "avatar_url": {
                        "location": "json",
                        "type": "string",
                        "description": "override the default avatar of the webhook",
                        "required": false
                    },
                    "tts": {
                        "location": "json",
                        "type": "boolean",
                        "description": "true if this is a TTS message",
                        "default": false,
                        "required": false
                    },
                    "embeds": {
                        "location": "json",
                        "type": "array",
                        "description": "embedded rich content"
                    },
                    "allowed_mentions": {
                        "location": "json",
                        "type": "object",
                        "description": "allowed mentions for the message"
                    },
                    "components": {
                        "location": "json",
                        "type": "array",
                        "description": "the components to include with the message"
                    },
                    "files": {
                        "location": "json",
                        "type": "file contents",
                        "description": "the contents of the file being sent/edited"
                    },
                    "payload_json": {
                        "location": "json",
                        "type": "string",
                        "description": "JSON encoded body of non-file params (multipart/form-data only)"
                    },
                    "attachments": {
                        "location": "json",
                        "type": "array",
                        "description": "attached files to keep and possible descriptions for new files"
                    }
                }
            }
        },
        "gateway": {
            "sessionStartLimit": {
                "link": "https://discordapp.com/developers/docs/topics/gateway#session-start-limit-object",
                "resource": "gateway",
                "description": "",
                "type": "object",
                "properties": {
                    "total": {
                        "location": "json",
                        "type": "integer",
                        "description": "The total number of session starts the current user is allowed"
                    },
                    "remaining": {
                        "location": "json",
                        "type": "integer",
                        "description": "The remaining number of session starts the current user is allowed"
                    },
                    "reset_after": {
                        "location": "json",
                        "type": "integer",
                        "description": "The number of milliseconds after which the limit resets"
                    },
                    "max_concurrency": {
                        "location": "json",
                        "type": "integer",
                        "description": "The number of identify requests allowed per 5 seconds"
                    }
                }
            }
        },
        "oauth2": {},
        "permissions": {
            "role": {
                "link": "https://discordapp.com/developers/docs/topics/permissions#role-object",
                "resource": "permissions",
                "description": "Roles represent a set of permissions attached to a group of users. Roles have unique names, colors, and can be \"pinned\" to the side bar, causing their members to be listed separately. Roles are unique per guild, and can have separate permission profiles for the global context (guild) and channel context. The @everyone role has the same ID as the guild it belongs to.",
                "type": "object",
                "properties": {
                    "id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "role id"
                    },
                    "name": {
                        "location": "json",
                        "type": "string",
                        "description": "role name"
                    },
                    "color": {
                        "location": "json",
                        "type": "integer",
                        "description": "integer representation of hexadecimal color code"
                    },
                    "hoist": {
                        "location": "json",
                        "type": "boolean",
                        "description": "if this role is pinned in the user listing",
                        "default": false
                    },
                    "icon": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "role icon hash"
                    },
                    "unicode_emoji": {
                        "location": "json",
                        "type": "string",
                        "nullable": true,
                        "description": "role unicode emoji"
                    },
                    "position": {
                        "location": "json",
                        "type": "integer",
                        "description": "position of this role"
                    },
                    "permissions": {
                        "location": "json",
                        "type": "string",
                        "description": "permission bit set"
                    },
                    "managed": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this role is managed by an integration",
                        "default": false
                    },
                    "mentionable": {
                        "location": "json",
                        "type": "boolean",
                        "description": "whether this role is mentionable",
                        "default": false
                    },
                    "tags": {
                        "location": "json",
                        "type": "object",
                        "description": "the tags this role has"
                    },
                    "bot_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the id of the bot this role belongs to"
                    },
                    "integration_id": {
                        "location": "json",
                        "type": "snowflake",
                        "description": "the id of the integration this role belongs to"
                    },
                    "premium_subscriber": {
                        "location": "json",
                        "type": "null",
                        "description": "whether this is the guild's premium subscriber role"
                    }
                }
            }
        }
    }
}
